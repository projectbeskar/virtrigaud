// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        (unknown)
// source: provider/v1/provider.proto

package providerv1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Power operations enum
type PowerOp int32

const (
	PowerOp_POWER_OP_UNSPECIFIED       PowerOp = 0
	PowerOp_POWER_OP_ON                PowerOp = 1
	PowerOp_POWER_OP_OFF               PowerOp = 2
	PowerOp_POWER_OP_REBOOT            PowerOp = 3
	PowerOp_POWER_OP_SHUTDOWN_GRACEFUL PowerOp = 4 // Graceful shutdown using guest tools
)

// Enum value maps for PowerOp.
var (
	PowerOp_name = map[int32]string{
		0: "POWER_OP_UNSPECIFIED",
		1: "POWER_OP_ON",
		2: "POWER_OP_OFF",
		3: "POWER_OP_REBOOT",
		4: "POWER_OP_SHUTDOWN_GRACEFUL",
	}
	PowerOp_value = map[string]int32{
		"POWER_OP_UNSPECIFIED":       0,
		"POWER_OP_ON":                1,
		"POWER_OP_OFF":               2,
		"POWER_OP_REBOOT":            3,
		"POWER_OP_SHUTDOWN_GRACEFUL": 4,
	}
)

func (x PowerOp) Enum() *PowerOp {
	p := new(PowerOp)
	*p = x
	return p
}

func (x PowerOp) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PowerOp) Descriptor() protoreflect.EnumDescriptor {
	return file_provider_v1_provider_proto_enumTypes[0].Descriptor()
}

func (PowerOp) Type() protoreflect.EnumType {
	return &file_provider_v1_provider_proto_enumTypes[0]
}

func (x PowerOp) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PowerOp.Descriptor instead.
func (PowerOp) EnumDescriptor() ([]byte, []int) {
	return file_provider_v1_provider_proto_rawDescGZIP(), []int{0}
}

// Task reference for async operations
type TaskRef struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *TaskRef) Reset() {
	*x = TaskRef{}
	if protoimpl.UnsafeEnabled {
		mi := &file_provider_v1_provider_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskRef) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskRef) ProtoMessage() {}

func (x *TaskRef) ProtoReflect() protoreflect.Message {
	mi := &file_provider_v1_provider_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskRef.ProtoReflect.Descriptor instead.
func (*TaskRef) Descriptor() ([]byte, []int) {
	return file_provider_v1_provider_proto_rawDescGZIP(), []int{0}
}

func (x *TaskRef) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// Empty message for operations with no parameters
type Empty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Empty) Reset() {
	*x = Empty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_provider_v1_provider_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Empty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Empty) ProtoMessage() {}

func (x *Empty) ProtoReflect() protoreflect.Message {
	mi := &file_provider_v1_provider_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Empty.ProtoReflect.Descriptor instead.
func (*Empty) Descriptor() ([]byte, []int) {
	return file_provider_v1_provider_proto_rawDescGZIP(), []int{1}
}

// Validate provider connectivity and configuration
type ValidateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ValidateRequest) Reset() {
	*x = ValidateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_provider_v1_provider_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValidateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidateRequest) ProtoMessage() {}

func (x *ValidateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_provider_v1_provider_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidateRequest.ProtoReflect.Descriptor instead.
func (*ValidateRequest) Descriptor() ([]byte, []int) {
	return file_provider_v1_provider_proto_rawDescGZIP(), []int{2}
}

type ValidateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ok      bool   `protobuf:"varint,1,opt,name=ok,proto3" json:"ok,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *ValidateResponse) Reset() {
	*x = ValidateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_provider_v1_provider_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValidateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidateResponse) ProtoMessage() {}

func (x *ValidateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_provider_v1_provider_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidateResponse.ProtoReflect.Descriptor instead.
func (*ValidateResponse) Descriptor() ([]byte, []int) {
	return file_provider_v1_provider_proto_rawDescGZIP(), []int{3}
}

func (x *ValidateResponse) GetOk() bool {
	if x != nil {
		return x.Ok
	}
	return false
}

func (x *ValidateResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// Create a new virtual machine
type CreateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name     string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	UserData []byte `protobuf:"bytes,2,opt,name=user_data,json=userData,proto3" json:"user_data,omitempty"` // Already rendered cloud-init/ignition data
	// JSON-encoded provider-agnostic specifications
	ClassJson     string   `protobuf:"bytes,3,opt,name=class_json,json=classJson,proto3" json:"class_json,omitempty"`             // VMClass
	ImageJson     string   `protobuf:"bytes,4,opt,name=image_json,json=imageJson,proto3" json:"image_json,omitempty"`             // VMImage
	NetworksJson  string   `protobuf:"bytes,5,opt,name=networks_json,json=networksJson,proto3" json:"networks_json,omitempty"`    // []NetworkAttachment
	DisksJson     string   `protobuf:"bytes,6,opt,name=disks_json,json=disksJson,proto3" json:"disks_json,omitempty"`             // []DiskSpec
	PlacementJson string   `protobuf:"bytes,7,opt,name=placement_json,json=placementJson,proto3" json:"placement_json,omitempty"` // Placement
	Tags          []string `protobuf:"bytes,8,rep,name=tags,proto3" json:"tags,omitempty"`                                        // Tags
}

func (x *CreateRequest) Reset() {
	*x = CreateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_provider_v1_provider_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateRequest) ProtoMessage() {}

func (x *CreateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_provider_v1_provider_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateRequest.ProtoReflect.Descriptor instead.
func (*CreateRequest) Descriptor() ([]byte, []int) {
	return file_provider_v1_provider_proto_rawDescGZIP(), []int{4}
}

func (x *CreateRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateRequest) GetUserData() []byte {
	if x != nil {
		return x.UserData
	}
	return nil
}

func (x *CreateRequest) GetClassJson() string {
	if x != nil {
		return x.ClassJson
	}
	return ""
}

func (x *CreateRequest) GetImageJson() string {
	if x != nil {
		return x.ImageJson
	}
	return ""
}

func (x *CreateRequest) GetNetworksJson() string {
	if x != nil {
		return x.NetworksJson
	}
	return ""
}

func (x *CreateRequest) GetDisksJson() string {
	if x != nil {
		return x.DisksJson
	}
	return ""
}

func (x *CreateRequest) GetPlacementJson() string {
	if x != nil {
		return x.PlacementJson
	}
	return ""
}

func (x *CreateRequest) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

type CreateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`     // Provider-specific VM identifier
	Task *TaskRef `protobuf:"bytes,2,opt,name=task,proto3" json:"task,omitempty"` // Optional task reference for async operations
}

func (x *CreateResponse) Reset() {
	*x = CreateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_provider_v1_provider_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateResponse) ProtoMessage() {}

func (x *CreateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_provider_v1_provider_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateResponse.ProtoReflect.Descriptor instead.
func (*CreateResponse) Descriptor() ([]byte, []int) {
	return file_provider_v1_provider_proto_rawDescGZIP(), []int{5}
}

func (x *CreateResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CreateResponse) GetTask() *TaskRef {
	if x != nil {
		return x.Task
	}
	return nil
}

// Delete a virtual machine
type DeleteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteRequest) Reset() {
	*x = DeleteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_provider_v1_provider_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteRequest) ProtoMessage() {}

func (x *DeleteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_provider_v1_provider_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteRequest.ProtoReflect.Descriptor instead.
func (*DeleteRequest) Descriptor() ([]byte, []int) {
	return file_provider_v1_provider_proto_rawDescGZIP(), []int{6}
}

func (x *DeleteRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// Power control operations
type PowerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                     string  `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Op                     PowerOp `protobuf:"varint,2,opt,name=op,proto3,enum=provider.v1.PowerOp" json:"op,omitempty"`
	GracefulTimeoutSeconds int32   `protobuf:"varint,3,opt,name=graceful_timeout_seconds,json=gracefulTimeoutSeconds,proto3" json:"graceful_timeout_seconds,omitempty"` // Timeout for graceful operations (shutdown/reboot)
}

func (x *PowerRequest) Reset() {
	*x = PowerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_provider_v1_provider_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PowerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PowerRequest) ProtoMessage() {}

func (x *PowerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_provider_v1_provider_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PowerRequest.ProtoReflect.Descriptor instead.
func (*PowerRequest) Descriptor() ([]byte, []int) {
	return file_provider_v1_provider_proto_rawDescGZIP(), []int{7}
}

func (x *PowerRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *PowerRequest) GetOp() PowerOp {
	if x != nil {
		return x.Op
	}
	return PowerOp_POWER_OP_UNSPECIFIED
}

func (x *PowerRequest) GetGracefulTimeoutSeconds() int32 {
	if x != nil {
		return x.GracefulTimeoutSeconds
	}
	return 0
}

// Reconfigure virtual machine resources
type ReconfigureRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	DesiredJson string `protobuf:"bytes,2,opt,name=desired_json,json=desiredJson,proto3" json:"desired_json,omitempty"` // JSON-encoded desired state
}

func (x *ReconfigureRequest) Reset() {
	*x = ReconfigureRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_provider_v1_provider_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReconfigureRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReconfigureRequest) ProtoMessage() {}

func (x *ReconfigureRequest) ProtoReflect() protoreflect.Message {
	mi := &file_provider_v1_provider_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReconfigureRequest.ProtoReflect.Descriptor instead.
func (*ReconfigureRequest) Descriptor() ([]byte, []int) {
	return file_provider_v1_provider_proto_rawDescGZIP(), []int{8}
}

func (x *ReconfigureRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ReconfigureRequest) GetDesiredJson() string {
	if x != nil {
		return x.DesiredJson
	}
	return ""
}

// Upgrade VM hardware version
type HardwareUpgradeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	TargetVersion int32  `protobuf:"varint,2,opt,name=target_version,json=targetVersion,proto3" json:"target_version,omitempty"` // Target hardware version (e.g., 21)
}

func (x *HardwareUpgradeRequest) Reset() {
	*x = HardwareUpgradeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_provider_v1_provider_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HardwareUpgradeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HardwareUpgradeRequest) ProtoMessage() {}

func (x *HardwareUpgradeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_provider_v1_provider_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HardwareUpgradeRequest.ProtoReflect.Descriptor instead.
func (*HardwareUpgradeRequest) Descriptor() ([]byte, []int) {
	return file_provider_v1_provider_proto_rawDescGZIP(), []int{9}
}

func (x *HardwareUpgradeRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *HardwareUpgradeRequest) GetTargetVersion() int32 {
	if x != nil {
		return x.TargetVersion
	}
	return 0
}

// Generic task response for async operations
type TaskResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Task *TaskRef `protobuf:"bytes,1,opt,name=task,proto3" json:"task,omitempty"`
}

func (x *TaskResponse) Reset() {
	*x = TaskResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_provider_v1_provider_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskResponse) ProtoMessage() {}

func (x *TaskResponse) ProtoReflect() protoreflect.Message {
	mi := &file_provider_v1_provider_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskResponse.ProtoReflect.Descriptor instead.
func (*TaskResponse) Descriptor() ([]byte, []int) {
	return file_provider_v1_provider_proto_rawDescGZIP(), []int{10}
}

func (x *TaskResponse) GetTask() *TaskRef {
	if x != nil {
		return x.Task
	}
	return nil
}

// Describe virtual machine current state
type DescribeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DescribeRequest) Reset() {
	*x = DescribeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_provider_v1_provider_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeRequest) ProtoMessage() {}

func (x *DescribeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_provider_v1_provider_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeRequest.ProtoReflect.Descriptor instead.
func (*DescribeRequest) Descriptor() ([]byte, []int) {
	return file_provider_v1_provider_proto_rawDescGZIP(), []int{11}
}

func (x *DescribeRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type DescribeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Exists          bool     `protobuf:"varint,1,opt,name=exists,proto3" json:"exists,omitempty"`
	PowerState      string   `protobuf:"bytes,2,opt,name=power_state,json=powerState,proto3" json:"power_state,omitempty"`
	Ips             []string `protobuf:"bytes,3,rep,name=ips,proto3" json:"ips,omitempty"`
	ConsoleUrl      string   `protobuf:"bytes,4,opt,name=console_url,json=consoleUrl,proto3" json:"console_url,omitempty"`
	ProviderRawJson string   `protobuf:"bytes,5,opt,name=provider_raw_json,json=providerRawJson,proto3" json:"provider_raw_json,omitempty"` // Provider-specific additional data
}

func (x *DescribeResponse) Reset() {
	*x = DescribeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_provider_v1_provider_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeResponse) ProtoMessage() {}

func (x *DescribeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_provider_v1_provider_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeResponse.ProtoReflect.Descriptor instead.
func (*DescribeResponse) Descriptor() ([]byte, []int) {
	return file_provider_v1_provider_proto_rawDescGZIP(), []int{12}
}

func (x *DescribeResponse) GetExists() bool {
	if x != nil {
		return x.Exists
	}
	return false
}

func (x *DescribeResponse) GetPowerState() string {
	if x != nil {
		return x.PowerState
	}
	return ""
}

func (x *DescribeResponse) GetIps() []string {
	if x != nil {
		return x.Ips
	}
	return nil
}

func (x *DescribeResponse) GetConsoleUrl() string {
	if x != nil {
		return x.ConsoleUrl
	}
	return ""
}

func (x *DescribeResponse) GetProviderRawJson() string {
	if x != nil {
		return x.ProviderRawJson
	}
	return ""
}

// Check async task status
type TaskStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Task *TaskRef `protobuf:"bytes,1,opt,name=task,proto3" json:"task,omitempty"`
}

func (x *TaskStatusRequest) Reset() {
	*x = TaskStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_provider_v1_provider_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskStatusRequest) ProtoMessage() {}

func (x *TaskStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_provider_v1_provider_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskStatusRequest.ProtoReflect.Descriptor instead.
func (*TaskStatusRequest) Descriptor() ([]byte, []int) {
	return file_provider_v1_provider_proto_rawDescGZIP(), []int{13}
}

func (x *TaskStatusRequest) GetTask() *TaskRef {
	if x != nil {
		return x.Task
	}
	return nil
}

type TaskStatusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Done  bool   `protobuf:"varint,1,opt,name=done,proto3" json:"done,omitempty"`
	Error string `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"` // Error message if task failed
}

func (x *TaskStatusResponse) Reset() {
	*x = TaskStatusResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_provider_v1_provider_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskStatusResponse) ProtoMessage() {}

func (x *TaskStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_provider_v1_provider_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskStatusResponse.ProtoReflect.Descriptor instead.
func (*TaskStatusResponse) Descriptor() ([]byte, []int) {
	return file_provider_v1_provider_proto_rawDescGZIP(), []int{14}
}

func (x *TaskStatusResponse) GetDone() bool {
	if x != nil {
		return x.Done
	}
	return false
}

func (x *TaskStatusResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

// Snapshot operations
type SnapshotCreateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VmId          string `protobuf:"bytes,1,opt,name=vm_id,json=vmId,proto3" json:"vm_id,omitempty"`
	NameHint      string `protobuf:"bytes,2,opt,name=name_hint,json=nameHint,proto3" json:"name_hint,omitempty"`
	IncludeMemory bool   `protobuf:"varint,3,opt,name=include_memory,json=includeMemory,proto3" json:"include_memory,omitempty"` // Include memory state if supported
	Description   string `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
}

func (x *SnapshotCreateRequest) Reset() {
	*x = SnapshotCreateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_provider_v1_provider_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SnapshotCreateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SnapshotCreateRequest) ProtoMessage() {}

func (x *SnapshotCreateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_provider_v1_provider_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SnapshotCreateRequest.ProtoReflect.Descriptor instead.
func (*SnapshotCreateRequest) Descriptor() ([]byte, []int) {
	return file_provider_v1_provider_proto_rawDescGZIP(), []int{15}
}

func (x *SnapshotCreateRequest) GetVmId() string {
	if x != nil {
		return x.VmId
	}
	return ""
}

func (x *SnapshotCreateRequest) GetNameHint() string {
	if x != nil {
		return x.NameHint
	}
	return ""
}

func (x *SnapshotCreateRequest) GetIncludeMemory() bool {
	if x != nil {
		return x.IncludeMemory
	}
	return false
}

func (x *SnapshotCreateRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

type SnapshotCreateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SnapshotId string   `protobuf:"bytes,1,opt,name=snapshot_id,json=snapshotId,proto3" json:"snapshot_id,omitempty"`
	Task       *TaskRef `protobuf:"bytes,2,opt,name=task,proto3" json:"task,omitempty"`
}

func (x *SnapshotCreateResponse) Reset() {
	*x = SnapshotCreateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_provider_v1_provider_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SnapshotCreateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SnapshotCreateResponse) ProtoMessage() {}

func (x *SnapshotCreateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_provider_v1_provider_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SnapshotCreateResponse.ProtoReflect.Descriptor instead.
func (*SnapshotCreateResponse) Descriptor() ([]byte, []int) {
	return file_provider_v1_provider_proto_rawDescGZIP(), []int{16}
}

func (x *SnapshotCreateResponse) GetSnapshotId() string {
	if x != nil {
		return x.SnapshotId
	}
	return ""
}

func (x *SnapshotCreateResponse) GetTask() *TaskRef {
	if x != nil {
		return x.Task
	}
	return nil
}

type SnapshotDeleteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VmId       string `protobuf:"bytes,1,opt,name=vm_id,json=vmId,proto3" json:"vm_id,omitempty"`
	SnapshotId string `protobuf:"bytes,2,opt,name=snapshot_id,json=snapshotId,proto3" json:"snapshot_id,omitempty"`
}

func (x *SnapshotDeleteRequest) Reset() {
	*x = SnapshotDeleteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_provider_v1_provider_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SnapshotDeleteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SnapshotDeleteRequest) ProtoMessage() {}

func (x *SnapshotDeleteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_provider_v1_provider_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SnapshotDeleteRequest.ProtoReflect.Descriptor instead.
func (*SnapshotDeleteRequest) Descriptor() ([]byte, []int) {
	return file_provider_v1_provider_proto_rawDescGZIP(), []int{17}
}

func (x *SnapshotDeleteRequest) GetVmId() string {
	if x != nil {
		return x.VmId
	}
	return ""
}

func (x *SnapshotDeleteRequest) GetSnapshotId() string {
	if x != nil {
		return x.SnapshotId
	}
	return ""
}

type SnapshotRevertRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VmId       string `protobuf:"bytes,1,opt,name=vm_id,json=vmId,proto3" json:"vm_id,omitempty"`
	SnapshotId string `protobuf:"bytes,2,opt,name=snapshot_id,json=snapshotId,proto3" json:"snapshot_id,omitempty"`
}

func (x *SnapshotRevertRequest) Reset() {
	*x = SnapshotRevertRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_provider_v1_provider_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SnapshotRevertRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SnapshotRevertRequest) ProtoMessage() {}

func (x *SnapshotRevertRequest) ProtoReflect() protoreflect.Message {
	mi := &file_provider_v1_provider_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SnapshotRevertRequest.ProtoReflect.Descriptor instead.
func (*SnapshotRevertRequest) Descriptor() ([]byte, []int) {
	return file_provider_v1_provider_proto_rawDescGZIP(), []int{18}
}

func (x *SnapshotRevertRequest) GetVmId() string {
	if x != nil {
		return x.VmId
	}
	return ""
}

func (x *SnapshotRevertRequest) GetSnapshotId() string {
	if x != nil {
		return x.SnapshotId
	}
	return ""
}

// Clone operations
type CloneRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SourceVmId string `protobuf:"bytes,1,opt,name=source_vm_id,json=sourceVmId,proto3" json:"source_vm_id,omitempty"`
	TargetName string `protobuf:"bytes,2,opt,name=target_name,json=targetName,proto3" json:"target_name,omitempty"`
	Linked     bool   `protobuf:"varint,3,opt,name=linked,proto3" json:"linked,omitempty"` // Best-effort linked clone
	// JSON-encoded specifications for customization
	ClassJson     string `protobuf:"bytes,4,opt,name=class_json,json=classJson,proto3" json:"class_json,omitempty"`             // VMClass overrides
	PlacementJson string `protobuf:"bytes,5,opt,name=placement_json,json=placementJson,proto3" json:"placement_json,omitempty"` // Placement hints
	CustomizeJson string `protobuf:"bytes,6,opt,name=customize_json,json=customizeJson,proto3" json:"customize_json,omitempty"` // Customization spec
}

func (x *CloneRequest) Reset() {
	*x = CloneRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_provider_v1_provider_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CloneRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloneRequest) ProtoMessage() {}

func (x *CloneRequest) ProtoReflect() protoreflect.Message {
	mi := &file_provider_v1_provider_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloneRequest.ProtoReflect.Descriptor instead.
func (*CloneRequest) Descriptor() ([]byte, []int) {
	return file_provider_v1_provider_proto_rawDescGZIP(), []int{19}
}

func (x *CloneRequest) GetSourceVmId() string {
	if x != nil {
		return x.SourceVmId
	}
	return ""
}

func (x *CloneRequest) GetTargetName() string {
	if x != nil {
		return x.TargetName
	}
	return ""
}

func (x *CloneRequest) GetLinked() bool {
	if x != nil {
		return x.Linked
	}
	return false
}

func (x *CloneRequest) GetClassJson() string {
	if x != nil {
		return x.ClassJson
	}
	return ""
}

func (x *CloneRequest) GetPlacementJson() string {
	if x != nil {
		return x.PlacementJson
	}
	return ""
}

func (x *CloneRequest) GetCustomizeJson() string {
	if x != nil {
		return x.CustomizeJson
	}
	return ""
}

type CloneResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TargetVmId string   `protobuf:"bytes,1,opt,name=target_vm_id,json=targetVmId,proto3" json:"target_vm_id,omitempty"`
	Task       *TaskRef `protobuf:"bytes,2,opt,name=task,proto3" json:"task,omitempty"`
}

func (x *CloneResponse) Reset() {
	*x = CloneResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_provider_v1_provider_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CloneResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloneResponse) ProtoMessage() {}

func (x *CloneResponse) ProtoReflect() protoreflect.Message {
	mi := &file_provider_v1_provider_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloneResponse.ProtoReflect.Descriptor instead.
func (*CloneResponse) Descriptor() ([]byte, []int) {
	return file_provider_v1_provider_proto_rawDescGZIP(), []int{20}
}

func (x *CloneResponse) GetTargetVmId() string {
	if x != nil {
		return x.TargetVmId
	}
	return ""
}

func (x *CloneResponse) GetTask() *TaskRef {
	if x != nil {
		return x.Task
	}
	return nil
}

// Image preparation operations
type ImagePrepareRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ImageJson   string `protobuf:"bytes,1,opt,name=image_json,json=imageJson,proto3" json:"image_json,omitempty"`       // JSON-encoded VMImage spec
	TargetName  string `protobuf:"bytes,2,opt,name=target_name,json=targetName,proto3" json:"target_name,omitempty"`    // Target template/image name
	StorageHint string `protobuf:"bytes,3,opt,name=storage_hint,json=storageHint,proto3" json:"storage_hint,omitempty"` // Storage location hint (datastore, pool, etc.)
}

func (x *ImagePrepareRequest) Reset() {
	*x = ImagePrepareRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_provider_v1_provider_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImagePrepareRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImagePrepareRequest) ProtoMessage() {}

func (x *ImagePrepareRequest) ProtoReflect() protoreflect.Message {
	mi := &file_provider_v1_provider_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImagePrepareRequest.ProtoReflect.Descriptor instead.
func (*ImagePrepareRequest) Descriptor() ([]byte, []int) {
	return file_provider_v1_provider_proto_rawDescGZIP(), []int{21}
}

func (x *ImagePrepareRequest) GetImageJson() string {
	if x != nil {
		return x.ImageJson
	}
	return ""
}

func (x *ImagePrepareRequest) GetTargetName() string {
	if x != nil {
		return x.TargetName
	}
	return ""
}

func (x *ImagePrepareRequest) GetStorageHint() string {
	if x != nil {
		return x.StorageHint
	}
	return ""
}

// Disk export operations for migration
type ExportDiskRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VmId           string            `protobuf:"bytes,1,opt,name=vm_id,json=vmId,proto3" json:"vm_id,omitempty"`                                                                                           // VM identifier
	DiskId         string            `protobuf:"bytes,2,opt,name=disk_id,json=diskId,proto3" json:"disk_id,omitempty"`                                                                                     // Disk identifier (optional, defaults to primary disk)
	SnapshotId     string            `protobuf:"bytes,3,opt,name=snapshot_id,json=snapshotId,proto3" json:"snapshot_id,omitempty"`                                                                         // Snapshot to export from (optional)
	DestinationUrl string            `protobuf:"bytes,4,opt,name=destination_url,json=destinationUrl,proto3" json:"destination_url,omitempty"`                                                             // Where to upload the disk (S3, HTTP, etc.)
	Format         string            `protobuf:"bytes,5,opt,name=format,proto3" json:"format,omitempty"`                                                                                                   // Desired export format (qcow2, vmdk, raw)
	Compress       bool              `protobuf:"varint,6,opt,name=compress,proto3" json:"compress,omitempty"`                                                                                              // Enable compression during export
	Credentials    map[string]string `protobuf:"bytes,7,rep,name=credentials,proto3" json:"credentials,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // Credentials for destination (access keys, tokens)
}

func (x *ExportDiskRequest) Reset() {
	*x = ExportDiskRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_provider_v1_provider_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExportDiskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExportDiskRequest) ProtoMessage() {}

func (x *ExportDiskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_provider_v1_provider_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExportDiskRequest.ProtoReflect.Descriptor instead.
func (*ExportDiskRequest) Descriptor() ([]byte, []int) {
	return file_provider_v1_provider_proto_rawDescGZIP(), []int{22}
}

func (x *ExportDiskRequest) GetVmId() string {
	if x != nil {
		return x.VmId
	}
	return ""
}

func (x *ExportDiskRequest) GetDiskId() string {
	if x != nil {
		return x.DiskId
	}
	return ""
}

func (x *ExportDiskRequest) GetSnapshotId() string {
	if x != nil {
		return x.SnapshotId
	}
	return ""
}

func (x *ExportDiskRequest) GetDestinationUrl() string {
	if x != nil {
		return x.DestinationUrl
	}
	return ""
}

func (x *ExportDiskRequest) GetFormat() string {
	if x != nil {
		return x.Format
	}
	return ""
}

func (x *ExportDiskRequest) GetCompress() bool {
	if x != nil {
		return x.Compress
	}
	return false
}

func (x *ExportDiskRequest) GetCredentials() map[string]string {
	if x != nil {
		return x.Credentials
	}
	return nil
}

type ExportDiskResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExportId           string   `protobuf:"bytes,1,opt,name=export_id,json=exportId,proto3" json:"export_id,omitempty"`                                  // Export operation identifier
	Task               *TaskRef `protobuf:"bytes,2,opt,name=task,proto3" json:"task,omitempty"`                                                          // Task reference for async tracking
	EstimatedSizeBytes int64    `protobuf:"varint,3,opt,name=estimated_size_bytes,json=estimatedSizeBytes,proto3" json:"estimated_size_bytes,omitempty"` // Estimated size of export
	Checksum           string   `protobuf:"bytes,4,opt,name=checksum,proto3" json:"checksum,omitempty"`                                                  // Checksum of exported disk (SHA256)
}

func (x *ExportDiskResponse) Reset() {
	*x = ExportDiskResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_provider_v1_provider_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExportDiskResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExportDiskResponse) ProtoMessage() {}

func (x *ExportDiskResponse) ProtoReflect() protoreflect.Message {
	mi := &file_provider_v1_provider_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExportDiskResponse.ProtoReflect.Descriptor instead.
func (*ExportDiskResponse) Descriptor() ([]byte, []int) {
	return file_provider_v1_provider_proto_rawDescGZIP(), []int{23}
}

func (x *ExportDiskResponse) GetExportId() string {
	if x != nil {
		return x.ExportId
	}
	return ""
}

func (x *ExportDiskResponse) GetTask() *TaskRef {
	if x != nil {
		return x.Task
	}
	return nil
}

func (x *ExportDiskResponse) GetEstimatedSizeBytes() int64 {
	if x != nil {
		return x.EstimatedSizeBytes
	}
	return 0
}

func (x *ExportDiskResponse) GetChecksum() string {
	if x != nil {
		return x.Checksum
	}
	return ""
}

// Disk import operations for migration
type ImportDiskRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SourceUrl        string            `protobuf:"bytes,1,opt,name=source_url,json=sourceUrl,proto3" json:"source_url,omitempty"`                                                                            // Where to download the disk from (S3, HTTP, etc.)
	StorageHint      string            `protobuf:"bytes,2,opt,name=storage_hint,json=storageHint,proto3" json:"storage_hint,omitempty"`                                                                      // Target storage location (datastore, pool, etc.)
	Format           string            `protobuf:"bytes,3,opt,name=format,proto3" json:"format,omitempty"`                                                                                                   // Source disk format (qcow2, vmdk, raw)
	TargetName       string            `protobuf:"bytes,4,opt,name=target_name,json=targetName,proto3" json:"target_name,omitempty"`                                                                         // Name for the imported disk
	VerifyChecksum   bool              `protobuf:"varint,5,opt,name=verify_checksum,json=verifyChecksum,proto3" json:"verify_checksum,omitempty"`                                                            // Verify checksum after import
	ExpectedChecksum string            `protobuf:"bytes,6,opt,name=expected_checksum,json=expectedChecksum,proto3" json:"expected_checksum,omitempty"`                                                       // Expected checksum (SHA256)
	Credentials      map[string]string `protobuf:"bytes,7,rep,name=credentials,proto3" json:"credentials,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // Credentials for source (access keys, tokens)
}

func (x *ImportDiskRequest) Reset() {
	*x = ImportDiskRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_provider_v1_provider_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImportDiskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImportDiskRequest) ProtoMessage() {}

func (x *ImportDiskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_provider_v1_provider_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImportDiskRequest.ProtoReflect.Descriptor instead.
func (*ImportDiskRequest) Descriptor() ([]byte, []int) {
	return file_provider_v1_provider_proto_rawDescGZIP(), []int{24}
}

func (x *ImportDiskRequest) GetSourceUrl() string {
	if x != nil {
		return x.SourceUrl
	}
	return ""
}

func (x *ImportDiskRequest) GetStorageHint() string {
	if x != nil {
		return x.StorageHint
	}
	return ""
}

func (x *ImportDiskRequest) GetFormat() string {
	if x != nil {
		return x.Format
	}
	return ""
}

func (x *ImportDiskRequest) GetTargetName() string {
	if x != nil {
		return x.TargetName
	}
	return ""
}

func (x *ImportDiskRequest) GetVerifyChecksum() bool {
	if x != nil {
		return x.VerifyChecksum
	}
	return false
}

func (x *ImportDiskRequest) GetExpectedChecksum() string {
	if x != nil {
		return x.ExpectedChecksum
	}
	return ""
}

func (x *ImportDiskRequest) GetCredentials() map[string]string {
	if x != nil {
		return x.Credentials
	}
	return nil
}

type ImportDiskResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DiskId          string   `protobuf:"bytes,1,opt,name=disk_id,json=diskId,proto3" json:"disk_id,omitempty"`                               // Imported disk identifier
	Path            string   `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`                                                 // Path to imported disk
	Task            *TaskRef `protobuf:"bytes,3,opt,name=task,proto3" json:"task,omitempty"`                                                 // Task reference for async tracking
	ActualSizeBytes int64    `protobuf:"varint,4,opt,name=actual_size_bytes,json=actualSizeBytes,proto3" json:"actual_size_bytes,omitempty"` // Actual size of imported disk
	Checksum        string   `protobuf:"bytes,5,opt,name=checksum,proto3" json:"checksum,omitempty"`                                         // Checksum of imported disk (SHA256)
}

func (x *ImportDiskResponse) Reset() {
	*x = ImportDiskResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_provider_v1_provider_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImportDiskResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImportDiskResponse) ProtoMessage() {}

func (x *ImportDiskResponse) ProtoReflect() protoreflect.Message {
	mi := &file_provider_v1_provider_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImportDiskResponse.ProtoReflect.Descriptor instead.
func (*ImportDiskResponse) Descriptor() ([]byte, []int) {
	return file_provider_v1_provider_proto_rawDescGZIP(), []int{25}
}

func (x *ImportDiskResponse) GetDiskId() string {
	if x != nil {
		return x.DiskId
	}
	return ""
}

func (x *ImportDiskResponse) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *ImportDiskResponse) GetTask() *TaskRef {
	if x != nil {
		return x.Task
	}
	return nil
}

func (x *ImportDiskResponse) GetActualSizeBytes() int64 {
	if x != nil {
		return x.ActualSizeBytes
	}
	return 0
}

func (x *ImportDiskResponse) GetChecksum() string {
	if x != nil {
		return x.Checksum
	}
	return ""
}

// Get disk information for migration planning
type GetDiskInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VmId       string `protobuf:"bytes,1,opt,name=vm_id,json=vmId,proto3" json:"vm_id,omitempty"`                   // VM identifier
	DiskId     string `protobuf:"bytes,2,opt,name=disk_id,json=diskId,proto3" json:"disk_id,omitempty"`             // Disk identifier (optional, defaults to primary disk)
	SnapshotId string `protobuf:"bytes,3,opt,name=snapshot_id,json=snapshotId,proto3" json:"snapshot_id,omitempty"` // Get info for specific snapshot (optional)
}

func (x *GetDiskInfoRequest) Reset() {
	*x = GetDiskInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_provider_v1_provider_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDiskInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDiskInfoRequest) ProtoMessage() {}

func (x *GetDiskInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_provider_v1_provider_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDiskInfoRequest.ProtoReflect.Descriptor instead.
func (*GetDiskInfoRequest) Descriptor() ([]byte, []int) {
	return file_provider_v1_provider_proto_rawDescGZIP(), []int{26}
}

func (x *GetDiskInfoRequest) GetVmId() string {
	if x != nil {
		return x.VmId
	}
	return ""
}

func (x *GetDiskInfoRequest) GetDiskId() string {
	if x != nil {
		return x.DiskId
	}
	return ""
}

func (x *GetDiskInfoRequest) GetSnapshotId() string {
	if x != nil {
		return x.SnapshotId
	}
	return ""
}

type GetDiskInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DiskId           string            `protobuf:"bytes,1,opt,name=disk_id,json=diskId,proto3" json:"disk_id,omitempty"`                                                                               // Disk identifier
	Format           string            `protobuf:"bytes,2,opt,name=format,proto3" json:"format,omitempty"`                                                                                             // Disk format (qcow2, vmdk, raw)
	VirtualSizeBytes int64             `protobuf:"varint,3,opt,name=virtual_size_bytes,json=virtualSizeBytes,proto3" json:"virtual_size_bytes,omitempty"`                                              // Virtual size (capacity)
	ActualSizeBytes  int64             `protobuf:"varint,4,opt,name=actual_size_bytes,json=actualSizeBytes,proto3" json:"actual_size_bytes,omitempty"`                                                 // Actual size (allocated)
	Path             string            `protobuf:"bytes,5,opt,name=path,proto3" json:"path,omitempty"`                                                                                                 // Path or location
	IsBootable       bool              `protobuf:"varint,6,opt,name=is_bootable,json=isBootable,proto3" json:"is_bootable,omitempty"`                                                                  // Is this a boot disk
	Snapshots        []string          `protobuf:"bytes,7,rep,name=snapshots,proto3" json:"snapshots,omitempty"`                                                                                       // Available snapshots
	BackingFile      string            `protobuf:"bytes,8,opt,name=backing_file,json=backingFile,proto3" json:"backing_file,omitempty"`                                                                // Backing file (for linked clones)
	Metadata         map[string]string `protobuf:"bytes,9,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // Additional provider-specific metadata
}

func (x *GetDiskInfoResponse) Reset() {
	*x = GetDiskInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_provider_v1_provider_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDiskInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDiskInfoResponse) ProtoMessage() {}

func (x *GetDiskInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_provider_v1_provider_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDiskInfoResponse.ProtoReflect.Descriptor instead.
func (*GetDiskInfoResponse) Descriptor() ([]byte, []int) {
	return file_provider_v1_provider_proto_rawDescGZIP(), []int{27}
}

func (x *GetDiskInfoResponse) GetDiskId() string {
	if x != nil {
		return x.DiskId
	}
	return ""
}

func (x *GetDiskInfoResponse) GetFormat() string {
	if x != nil {
		return x.Format
	}
	return ""
}

func (x *GetDiskInfoResponse) GetVirtualSizeBytes() int64 {
	if x != nil {
		return x.VirtualSizeBytes
	}
	return 0
}

func (x *GetDiskInfoResponse) GetActualSizeBytes() int64 {
	if x != nil {
		return x.ActualSizeBytes
	}
	return 0
}

func (x *GetDiskInfoResponse) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *GetDiskInfoResponse) GetIsBootable() bool {
	if x != nil {
		return x.IsBootable
	}
	return false
}

func (x *GetDiskInfoResponse) GetSnapshots() []string {
	if x != nil {
		return x.Snapshots
	}
	return nil
}

func (x *GetDiskInfoResponse) GetBackingFile() string {
	if x != nil {
		return x.BackingFile
	}
	return ""
}

func (x *GetDiskInfoResponse) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

// Capability check - what features does this provider support
type GetCapabilitiesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetCapabilitiesRequest) Reset() {
	*x = GetCapabilitiesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_provider_v1_provider_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCapabilitiesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCapabilitiesRequest) ProtoMessage() {}

func (x *GetCapabilitiesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_provider_v1_provider_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCapabilitiesRequest.ProtoReflect.Descriptor instead.
func (*GetCapabilitiesRequest) Descriptor() ([]byte, []int) {
	return file_provider_v1_provider_proto_rawDescGZIP(), []int{28}
}

type GetCapabilitiesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SupportsReconfigureOnline   bool     `protobuf:"varint,1,opt,name=supports_reconfigure_online,json=supportsReconfigureOnline,proto3" json:"supports_reconfigure_online,omitempty"`
	SupportsDiskExpansionOnline bool     `protobuf:"varint,2,opt,name=supports_disk_expansion_online,json=supportsDiskExpansionOnline,proto3" json:"supports_disk_expansion_online,omitempty"`
	SupportsSnapshots           bool     `protobuf:"varint,3,opt,name=supports_snapshots,json=supportsSnapshots,proto3" json:"supports_snapshots,omitempty"`
	SupportsMemorySnapshots     bool     `protobuf:"varint,4,opt,name=supports_memory_snapshots,json=supportsMemorySnapshots,proto3" json:"supports_memory_snapshots,omitempty"`
	SupportsLinkedClones        bool     `protobuf:"varint,5,opt,name=supports_linked_clones,json=supportsLinkedClones,proto3" json:"supports_linked_clones,omitempty"`
	SupportsImageImport         bool     `protobuf:"varint,6,opt,name=supports_image_import,json=supportsImageImport,proto3" json:"supports_image_import,omitempty"`
	SupportedDiskTypes          []string `protobuf:"bytes,7,rep,name=supported_disk_types,json=supportedDiskTypes,proto3" json:"supported_disk_types,omitempty"`
	SupportedNetworkTypes       []string `protobuf:"bytes,8,rep,name=supported_network_types,json=supportedNetworkTypes,proto3" json:"supported_network_types,omitempty"`
	SupportsDiskExport          bool     `protobuf:"varint,9,opt,name=supports_disk_export,json=supportsDiskExport,proto3" json:"supports_disk_export,omitempty"`                       // Can export disks for migration
	SupportsDiskImport          bool     `protobuf:"varint,10,opt,name=supports_disk_import,json=supportsDiskImport,proto3" json:"supports_disk_import,omitempty"`                      // Can import disks from external sources
	SupportedExportFormats      []string `protobuf:"bytes,11,rep,name=supported_export_formats,json=supportedExportFormats,proto3" json:"supported_export_formats,omitempty"`           // Supported export formats (qcow2, vmdk, raw)
	SupportedImportFormats      []string `protobuf:"bytes,12,rep,name=supported_import_formats,json=supportedImportFormats,proto3" json:"supported_import_formats,omitempty"`           // Supported import formats
	SupportsExportCompression   bool     `protobuf:"varint,13,opt,name=supports_export_compression,json=supportsExportCompression,proto3" json:"supports_export_compression,omitempty"` // Supports compression during export
}

func (x *GetCapabilitiesResponse) Reset() {
	*x = GetCapabilitiesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_provider_v1_provider_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCapabilitiesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCapabilitiesResponse) ProtoMessage() {}

func (x *GetCapabilitiesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_provider_v1_provider_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCapabilitiesResponse.ProtoReflect.Descriptor instead.
func (*GetCapabilitiesResponse) Descriptor() ([]byte, []int) {
	return file_provider_v1_provider_proto_rawDescGZIP(), []int{29}
}

func (x *GetCapabilitiesResponse) GetSupportsReconfigureOnline() bool {
	if x != nil {
		return x.SupportsReconfigureOnline
	}
	return false
}

func (x *GetCapabilitiesResponse) GetSupportsDiskExpansionOnline() bool {
	if x != nil {
		return x.SupportsDiskExpansionOnline
	}
	return false
}

func (x *GetCapabilitiesResponse) GetSupportsSnapshots() bool {
	if x != nil {
		return x.SupportsSnapshots
	}
	return false
}

func (x *GetCapabilitiesResponse) GetSupportsMemorySnapshots() bool {
	if x != nil {
		return x.SupportsMemorySnapshots
	}
	return false
}

func (x *GetCapabilitiesResponse) GetSupportsLinkedClones() bool {
	if x != nil {
		return x.SupportsLinkedClones
	}
	return false
}

func (x *GetCapabilitiesResponse) GetSupportsImageImport() bool {
	if x != nil {
		return x.SupportsImageImport
	}
	return false
}

func (x *GetCapabilitiesResponse) GetSupportedDiskTypes() []string {
	if x != nil {
		return x.SupportedDiskTypes
	}
	return nil
}

func (x *GetCapabilitiesResponse) GetSupportedNetworkTypes() []string {
	if x != nil {
		return x.SupportedNetworkTypes
	}
	return nil
}

func (x *GetCapabilitiesResponse) GetSupportsDiskExport() bool {
	if x != nil {
		return x.SupportsDiskExport
	}
	return false
}

func (x *GetCapabilitiesResponse) GetSupportsDiskImport() bool {
	if x != nil {
		return x.SupportsDiskImport
	}
	return false
}

func (x *GetCapabilitiesResponse) GetSupportedExportFormats() []string {
	if x != nil {
		return x.SupportedExportFormats
	}
	return nil
}

func (x *GetCapabilitiesResponse) GetSupportedImportFormats() []string {
	if x != nil {
		return x.SupportedImportFormats
	}
	return nil
}

func (x *GetCapabilitiesResponse) GetSupportsExportCompression() bool {
	if x != nil {
		return x.SupportsExportCompression
	}
	return false
}

var File_provider_v1_provider_proto protoreflect.FileDescriptor

var file_provider_v1_provider_proto_rawDesc = []byte{
	0x0a, 0x1a, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0b, 0x70, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x22, 0x19, 0x0a, 0x07, 0x54, 0x61, 0x73,
	0x6b, 0x52, 0x65, 0x66, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x22, 0x07, 0x0a, 0x05, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x11, 0x0a,
	0x0f, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x22, 0x3c, 0x0a, 0x10, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x6f, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x02, 0x6f, 0x6b, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xfd,
	0x01, 0x0a, 0x0d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x6a, 0x73, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x4a, 0x73, 0x6f, 0x6e,
	0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x6a, 0x73, 0x6f, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x4a, 0x73, 0x6f, 0x6e, 0x12,
	0x23, 0x0a, 0x0d, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x5f, 0x6a, 0x73, 0x6f, 0x6e,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73,
	0x4a, 0x73, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x69, 0x73, 0x6b, 0x73, 0x5f, 0x6a, 0x73,
	0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x69, 0x73, 0x6b, 0x73, 0x4a,
	0x73, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x6a, 0x73, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x6c, 0x61,
	0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4a, 0x73, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61,
	0x67, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x22, 0x4a,
	0x0a, 0x0e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x28, 0x0a, 0x04, 0x74, 0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x73,
	0x6b, 0x52, 0x65, 0x66, 0x52, 0x04, 0x74, 0x61, 0x73, 0x6b, 0x22, 0x1f, 0x0a, 0x0d, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x7e, 0x0a, 0x0c, 0x50,
	0x6f, 0x77, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x24, 0x0a, 0x02, 0x6f,
	0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x4f, 0x70, 0x52, 0x02, 0x6f,
	0x70, 0x12, 0x38, 0x0a, 0x18, 0x67, 0x72, 0x61, 0x63, 0x65, 0x66, 0x75, 0x6c, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x6f, 0x75, 0x74, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x16, 0x67, 0x72, 0x61, 0x63, 0x65, 0x66, 0x75, 0x6c, 0x54, 0x69, 0x6d,
	0x65, 0x6f, 0x75, 0x74, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x22, 0x47, 0x0a, 0x12, 0x52,
	0x65, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x6a, 0x73, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64,
	0x4a, 0x73, 0x6f, 0x6e, 0x22, 0x4f, 0x0a, 0x16, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65,
	0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x25,
	0x0a, 0x0e, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x38, 0x0a, 0x0c, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x28, 0x0a, 0x04, 0x74, 0x61, 0x73, 0x6b, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x66, 0x52, 0x04, 0x74, 0x61, 0x73, 0x6b, 0x22,
	0x21, 0x0a, 0x0f, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x22, 0xaa, 0x01, 0x0a, 0x10, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x78, 0x69, 0x73, 0x74,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x12,
	0x1f, 0x0a, 0x0b, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x10, 0x0a, 0x03, 0x69, 0x70, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x03, 0x69,
	0x70, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x5f, 0x75, 0x72,
	0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65,
	0x55, 0x72, 0x6c, 0x12, 0x2a, 0x0a, 0x11, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f,
	0x72, 0x61, 0x77, 0x5f, 0x6a, 0x73, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x52, 0x61, 0x77, 0x4a, 0x73, 0x6f, 0x6e, 0x22,
	0x3d, 0x0a, 0x11, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x04, 0x74, 0x61, 0x73, 0x6b, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x66, 0x52, 0x04, 0x74, 0x61, 0x73, 0x6b, 0x22, 0x3e,
	0x0a, 0x12, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x6f, 0x6e, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x04, 0x64, 0x6f, 0x6e, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x92,
	0x01, 0x0a, 0x15, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x13, 0x0a, 0x05, 0x76, 0x6d, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x76, 0x6d, 0x49, 0x64, 0x12, 0x1b, 0x0a,
	0x09, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x68, 0x69, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x6e, 0x61, 0x6d, 0x65, 0x48, 0x69, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x69, 0x6e,
	0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0d, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x4d, 0x65, 0x6d, 0x6f, 0x72,
	0x79, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0x63, 0x0a, 0x16, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1f, 0x0a,
	0x0b, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x49, 0x64, 0x12, 0x28,
	0x0a, 0x04, 0x74, 0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x52,
	0x65, 0x66, 0x52, 0x04, 0x74, 0x61, 0x73, 0x6b, 0x22, 0x4d, 0x0a, 0x15, 0x53, 0x6e, 0x61, 0x70,
	0x73, 0x68, 0x6f, 0x74, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x13, 0x0a, 0x05, 0x76, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x76, 0x6d, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68,
	0x6f, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x6e, 0x61,
	0x70, 0x73, 0x68, 0x6f, 0x74, 0x49, 0x64, 0x22, 0x4d, 0x0a, 0x15, 0x53, 0x6e, 0x61, 0x70, 0x73,
	0x68, 0x6f, 0x74, 0x52, 0x65, 0x76, 0x65, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x13, 0x0a, 0x05, 0x76, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x76, 0x6d, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x6e, 0x61, 0x70,
	0x73, 0x68, 0x6f, 0x74, 0x49, 0x64, 0x22, 0xd6, 0x01, 0x0a, 0x0c, 0x43, 0x6c, 0x6f, 0x6e, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0c, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x5f, 0x76, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x56, 0x6d, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x69,
	0x6e, 0x6b, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x6c, 0x69, 0x6e, 0x6b,
	0x65, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x6a, 0x73, 0x6f, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x4a, 0x73, 0x6f,
	0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6a,
	0x73, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x6c, 0x61, 0x63, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x4a, 0x73, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x69, 0x7a, 0x65, 0x5f, 0x6a, 0x73, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x65, 0x4a, 0x73, 0x6f, 0x6e, 0x22,
	0x5b, 0x0a, 0x0d, 0x43, 0x6c, 0x6f, 0x6e, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x20, 0x0a, 0x0c, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x76, 0x6d, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x56, 0x6d,
	0x49, 0x64, 0x12, 0x28, 0x0a, 0x04, 0x74, 0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x54,
	0x61, 0x73, 0x6b, 0x52, 0x65, 0x66, 0x52, 0x04, 0x74, 0x61, 0x73, 0x6b, 0x22, 0x78, 0x0a, 0x13,
	0x49, 0x6d, 0x61, 0x67, 0x65, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x6a, 0x73, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x4a, 0x73,
	0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x68,
	0x69, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x48, 0x69, 0x6e, 0x74, 0x22, 0xd2, 0x02, 0x0a, 0x11, 0x45, 0x78, 0x70, 0x6f, 0x72,
	0x74, 0x44, 0x69, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x13, 0x0a, 0x05,
	0x76, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x76, 0x6d, 0x49,
	0x64, 0x12, 0x17, 0x0a, 0x07, 0x64, 0x69, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x64, 0x69, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x6e,
	0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x64,
	0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x55, 0x72, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x1a, 0x0a, 0x08,
	0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08,
	0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x12, 0x51, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e,
	0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x70, 0x6f,
	0x72, 0x74, 0x44, 0x69, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x43, 0x72,
	0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b,
	0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x1a, 0x3e, 0x0a, 0x10, 0x43,
	0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xa9, 0x01, 0x0a, 0x12,
	0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x69, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x12,
	0x28, 0x0a, 0x04, 0x74, 0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x73, 0x6b,
	0x52, 0x65, 0x66, 0x52, 0x04, 0x74, 0x61, 0x73, 0x6b, 0x12, 0x30, 0x0a, 0x14, 0x65, 0x73, 0x74,
	0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x62, 0x79, 0x74, 0x65,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74,
	0x65, 0x64, 0x53, 0x69, 0x7a, 0x65, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x63,
	0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63,
	0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x22, 0xf7, 0x02, 0x0a, 0x11, 0x49, 0x6d, 0x70, 0x6f,
	0x72, 0x74, 0x44, 0x69, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a,
	0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x21, 0x0a, 0x0c,
	0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x68, 0x69, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x48, 0x69, 0x6e, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x76, 0x65, 0x72, 0x69,
	0x66, 0x79, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0e, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75,
	0x6d, 0x12, 0x2b, 0x0a, 0x11, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x68,
	0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x65, 0x78,
	0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x12, 0x51,
	0x0a, 0x0b, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x18, 0x07, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x69, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x2e, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c,
	0x73, 0x1a, 0x3e, 0x0a, 0x10, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0xb3, 0x01, 0x0a, 0x12, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x69, 0x73, 0x6b,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x64, 0x69, 0x73, 0x6b,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x69, 0x73, 0x6b, 0x49,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x28, 0x0a, 0x04, 0x74, 0x61, 0x73, 0x6b, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x66, 0x52, 0x04, 0x74, 0x61, 0x73, 0x6b, 0x12,
	0x2a, 0x0a, 0x11, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x62,
	0x79, 0x74, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x61, 0x63, 0x74, 0x75,
	0x61, 0x6c, 0x53, 0x69, 0x7a, 0x65, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x63,
	0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63,
	0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x22, 0x63, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x44, 0x69,
	0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x13, 0x0a,
	0x05, 0x76, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x76, 0x6d,
	0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x64, 0x69, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x69, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x73,
	0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x49, 0x64, 0x22, 0x9f, 0x03, 0x0a,
	0x13, 0x47, 0x65, 0x74, 0x44, 0x69, 0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x64, 0x69, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x69, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x16, 0x0a,
	0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c,
	0x5f, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x10, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x53, 0x69, 0x7a, 0x65, 0x42, 0x79,
	0x74, 0x65, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x73, 0x69,
	0x7a, 0x65, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f,
	0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x53, 0x69, 0x7a, 0x65, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12,
	0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70,
	0x61, 0x74, 0x68, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x62, 0x6f, 0x6f, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x42, 0x6f, 0x6f, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74,
	0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f,
	0x74, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x66, 0x69,
	0x6c, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x62, 0x61, 0x63, 0x6b, 0x69, 0x6e,
	0x67, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x4a, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x69, 0x73, 0x6b, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x1a, 0x3b, 0x0a, 0x0d, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x18,
	0x0a, 0x16, 0x47, 0x65, 0x74, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xf5, 0x05, 0x0a, 0x17, 0x47, 0x65, 0x74,
	0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3e, 0x0a, 0x1b, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x73,
	0x5f, 0x72, 0x65, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x5f, 0x6f, 0x6e, 0x6c,
	0x69, 0x6e, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x19, 0x73, 0x75, 0x70, 0x70, 0x6f,
	0x72, 0x74, 0x73, 0x52, 0x65, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x4f, 0x6e,
	0x6c, 0x69, 0x6e, 0x65, 0x12, 0x43, 0x0a, 0x1e, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x73,
	0x5f, 0x64, 0x69, 0x73, 0x6b, 0x5f, 0x65, 0x78, 0x70, 0x61, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x5f,
	0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1b, 0x73, 0x75,
	0x70, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x44, 0x69, 0x73, 0x6b, 0x45, 0x78, 0x70, 0x61, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x2d, 0x0a, 0x12, 0x73, 0x75, 0x70,
	0x70, 0x6f, 0x72, 0x74, 0x73, 0x5f, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x53,
	0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x12, 0x3a, 0x0a, 0x19, 0x73, 0x75, 0x70, 0x70,
	0x6f, 0x72, 0x74, 0x73, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x73, 0x6e, 0x61, 0x70,
	0x73, 0x68, 0x6f, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x17, 0x73, 0x75, 0x70,
	0x70, 0x6f, 0x72, 0x74, 0x73, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x53, 0x6e, 0x61, 0x70, 0x73,
	0x68, 0x6f, 0x74, 0x73, 0x12, 0x34, 0x0a, 0x16, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x73,
	0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x5f, 0x63, 0x6c, 0x6f, 0x6e, 0x65, 0x73, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x4c, 0x69,
	0x6e, 0x6b, 0x65, 0x64, 0x43, 0x6c, 0x6f, 0x6e, 0x65, 0x73, 0x12, 0x32, 0x0a, 0x15, 0x73, 0x75,
	0x70, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x6d, 0x70,
	0x6f, 0x72, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x73, 0x75, 0x70, 0x70, 0x6f,
	0x72, 0x74, 0x73, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x30,
	0x0a, 0x14, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x64, 0x69, 0x73, 0x6b,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x12, 0x73, 0x75,
	0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x44, 0x69, 0x73, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x73,
	0x12, 0x36, 0x0a, 0x17, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x15, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x4e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x30, 0x0a, 0x14, 0x73, 0x75, 0x70, 0x70,
	0x6f, 0x72, 0x74, 0x73, 0x5f, 0x64, 0x69, 0x73, 0x6b, 0x5f, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x73,
	0x44, 0x69, 0x73, 0x6b, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x30, 0x0a, 0x14, 0x73, 0x75,
	0x70, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x5f, 0x64, 0x69, 0x73, 0x6b, 0x5f, 0x69, 0x6d, 0x70, 0x6f,
	0x72, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72,
	0x74, 0x73, 0x44, 0x69, 0x73, 0x6b, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x38, 0x0a, 0x18,
	0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74,
	0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x09, 0x52, 0x16,
	0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x46,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x73, 0x12, 0x38, 0x0a, 0x18, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72,
	0x74, 0x65, 0x64, 0x5f, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x09, 0x52, 0x16, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72,
	0x74, 0x65, 0x64, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x73,
	0x12, 0x3e, 0x0a, 0x1b, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x5f, 0x65, 0x78, 0x70,
	0x6f, 0x72, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x19, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x45,
	0x78, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x2a, 0x7b, 0x0a, 0x07, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x4f, 0x70, 0x12, 0x18, 0x0a, 0x14, 0x50,
	0x4f, 0x57, 0x45, 0x52, 0x5f, 0x4f, 0x50, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x50, 0x4f, 0x57, 0x45, 0x52, 0x5f, 0x4f,
	0x50, 0x5f, 0x4f, 0x4e, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x50, 0x4f, 0x57, 0x45, 0x52, 0x5f,
	0x4f, 0x50, 0x5f, 0x4f, 0x46, 0x46, 0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f, 0x50, 0x4f, 0x57, 0x45,
	0x52, 0x5f, 0x4f, 0x50, 0x5f, 0x52, 0x45, 0x42, 0x4f, 0x4f, 0x54, 0x10, 0x03, 0x12, 0x1e, 0x0a,
	0x1a, 0x50, 0x4f, 0x57, 0x45, 0x52, 0x5f, 0x4f, 0x50, 0x5f, 0x53, 0x48, 0x55, 0x54, 0x44, 0x4f,
	0x57, 0x4e, 0x5f, 0x47, 0x52, 0x41, 0x43, 0x45, 0x46, 0x55, 0x4c, 0x10, 0x04, 0x32, 0xa4, 0x0a,
	0x0a, 0x08, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x47, 0x0a, 0x08, 0x56, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x12, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x41, 0x0a, 0x06, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x2e,
	0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3f, 0x0a, 0x06, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x12, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x70,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3d, 0x0a, 0x05, 0x50, 0x6f, 0x77, 0x65, 0x72,
	0x12, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x50,
	0x6f, 0x77, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x70, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x49, 0x0a, 0x0b, 0x52, 0x65, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x75, 0x72, 0x65, 0x12, 0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x51, 0x0a, 0x0f, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x55, 0x70, 0x67,
	0x72, 0x61, 0x64, 0x65, 0x12, 0x23, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x55, 0x70, 0x67, 0x72, 0x61,
	0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x47, 0x0a, 0x08, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65,
	0x12, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d,
	0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x62, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4d, 0x0a,
	0x0a, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1e, 0x2e, 0x70, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x70, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x59, 0x0a, 0x0e,
	0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x22,
	0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6e, 0x61,
	0x70, 0x73, 0x68, 0x6f, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x23, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4f, 0x0a, 0x0e, 0x53, 0x6e, 0x61, 0x70, 0x73,
	0x68, 0x6f, 0x74, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x22, 0x2e, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e,
	0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x73, 0x6b,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4f, 0x0a, 0x0e, 0x53, 0x6e, 0x61, 0x70,
	0x73, 0x68, 0x6f, 0x74, 0x52, 0x65, 0x76, 0x65, 0x72, 0x74, 0x12, 0x22, 0x2e, 0x70, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f,
	0x74, 0x52, 0x65, 0x76, 0x65, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19,
	0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x73,
	0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3e, 0x0a, 0x05, 0x43, 0x6c, 0x6f,
	0x6e, 0x65, 0x12, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x6c, 0x6f, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e,
	0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x6f, 0x6e,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4b, 0x0a, 0x0c, 0x49, 0x6d, 0x61,
	0x67, 0x65, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x12, 0x20, 0x2e, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x50, 0x72, 0x65,
	0x70, 0x61, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x70, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5c, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x43, 0x61, 0x70,
	0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x23, 0x2e, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x61, 0x70, 0x61, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24,
	0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4d, 0x0a, 0x0a, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x69,
	0x73, 0x6b, 0x12, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x69, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x69, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x4d, 0x0a, 0x0a, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x69, 0x73,
	0x6b, 0x12, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x69, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x69, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x50, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x44, 0x69, 0x73, 0x6b, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x65, 0x74, 0x44, 0x69, 0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x20, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x44, 0x69, 0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x42, 0xb3, 0x01, 0x0a, 0x0f, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x42, 0x0d, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x44, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x62, 0x65, 0x73,
	0x6b, 0x61, 0x72, 0x2f, 0x76, 0x69, 0x72, 0x74, 0x72, 0x69, 0x67, 0x61, 0x75, 0x64, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x72, 0x70, 0x63, 0x2f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x2f, 0x76, 0x31, 0x3b, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x76, 0x31, 0xa2,
	0x02, 0x03, 0x50, 0x58, 0x58, 0xaa, 0x02, 0x0b, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x2e, 0x56, 0x31, 0xca, 0x02, 0x0b, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5c, 0x56,
	0x31, 0xe2, 0x02, 0x17, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5c, 0x56, 0x31, 0x5c,
	0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x0c, 0x50, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_provider_v1_provider_proto_rawDescOnce sync.Once
	file_provider_v1_provider_proto_rawDescData = file_provider_v1_provider_proto_rawDesc
)

func file_provider_v1_provider_proto_rawDescGZIP() []byte {
	file_provider_v1_provider_proto_rawDescOnce.Do(func() {
		file_provider_v1_provider_proto_rawDescData = protoimpl.X.CompressGZIP(file_provider_v1_provider_proto_rawDescData)
	})
	return file_provider_v1_provider_proto_rawDescData
}

var file_provider_v1_provider_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_provider_v1_provider_proto_msgTypes = make([]protoimpl.MessageInfo, 33)
var file_provider_v1_provider_proto_goTypes = []any{
	(PowerOp)(0),                    // 0: provider.v1.PowerOp
	(*TaskRef)(nil),                 // 1: provider.v1.TaskRef
	(*Empty)(nil),                   // 2: provider.v1.Empty
	(*ValidateRequest)(nil),         // 3: provider.v1.ValidateRequest
	(*ValidateResponse)(nil),        // 4: provider.v1.ValidateResponse
	(*CreateRequest)(nil),           // 5: provider.v1.CreateRequest
	(*CreateResponse)(nil),          // 6: provider.v1.CreateResponse
	(*DeleteRequest)(nil),           // 7: provider.v1.DeleteRequest
	(*PowerRequest)(nil),            // 8: provider.v1.PowerRequest
	(*ReconfigureRequest)(nil),      // 9: provider.v1.ReconfigureRequest
	(*HardwareUpgradeRequest)(nil),  // 10: provider.v1.HardwareUpgradeRequest
	(*TaskResponse)(nil),            // 11: provider.v1.TaskResponse
	(*DescribeRequest)(nil),         // 12: provider.v1.DescribeRequest
	(*DescribeResponse)(nil),        // 13: provider.v1.DescribeResponse
	(*TaskStatusRequest)(nil),       // 14: provider.v1.TaskStatusRequest
	(*TaskStatusResponse)(nil),      // 15: provider.v1.TaskStatusResponse
	(*SnapshotCreateRequest)(nil),   // 16: provider.v1.SnapshotCreateRequest
	(*SnapshotCreateResponse)(nil),  // 17: provider.v1.SnapshotCreateResponse
	(*SnapshotDeleteRequest)(nil),   // 18: provider.v1.SnapshotDeleteRequest
	(*SnapshotRevertRequest)(nil),   // 19: provider.v1.SnapshotRevertRequest
	(*CloneRequest)(nil),            // 20: provider.v1.CloneRequest
	(*CloneResponse)(nil),           // 21: provider.v1.CloneResponse
	(*ImagePrepareRequest)(nil),     // 22: provider.v1.ImagePrepareRequest
	(*ExportDiskRequest)(nil),       // 23: provider.v1.ExportDiskRequest
	(*ExportDiskResponse)(nil),      // 24: provider.v1.ExportDiskResponse
	(*ImportDiskRequest)(nil),       // 25: provider.v1.ImportDiskRequest
	(*ImportDiskResponse)(nil),      // 26: provider.v1.ImportDiskResponse
	(*GetDiskInfoRequest)(nil),      // 27: provider.v1.GetDiskInfoRequest
	(*GetDiskInfoResponse)(nil),     // 28: provider.v1.GetDiskInfoResponse
	(*GetCapabilitiesRequest)(nil),  // 29: provider.v1.GetCapabilitiesRequest
	(*GetCapabilitiesResponse)(nil), // 30: provider.v1.GetCapabilitiesResponse
	nil,                             // 31: provider.v1.ExportDiskRequest.CredentialsEntry
	nil,                             // 32: provider.v1.ImportDiskRequest.CredentialsEntry
	nil,                             // 33: provider.v1.GetDiskInfoResponse.MetadataEntry
}
var file_provider_v1_provider_proto_depIdxs = []int32{
	1,  // 0: provider.v1.CreateResponse.task:type_name -> provider.v1.TaskRef
	0,  // 1: provider.v1.PowerRequest.op:type_name -> provider.v1.PowerOp
	1,  // 2: provider.v1.TaskResponse.task:type_name -> provider.v1.TaskRef
	1,  // 3: provider.v1.TaskStatusRequest.task:type_name -> provider.v1.TaskRef
	1,  // 4: provider.v1.SnapshotCreateResponse.task:type_name -> provider.v1.TaskRef
	1,  // 5: provider.v1.CloneResponse.task:type_name -> provider.v1.TaskRef
	31, // 6: provider.v1.ExportDiskRequest.credentials:type_name -> provider.v1.ExportDiskRequest.CredentialsEntry
	1,  // 7: provider.v1.ExportDiskResponse.task:type_name -> provider.v1.TaskRef
	32, // 8: provider.v1.ImportDiskRequest.credentials:type_name -> provider.v1.ImportDiskRequest.CredentialsEntry
	1,  // 9: provider.v1.ImportDiskResponse.task:type_name -> provider.v1.TaskRef
	33, // 10: provider.v1.GetDiskInfoResponse.metadata:type_name -> provider.v1.GetDiskInfoResponse.MetadataEntry
	3,  // 11: provider.v1.Provider.Validate:input_type -> provider.v1.ValidateRequest
	5,  // 12: provider.v1.Provider.Create:input_type -> provider.v1.CreateRequest
	7,  // 13: provider.v1.Provider.Delete:input_type -> provider.v1.DeleteRequest
	8,  // 14: provider.v1.Provider.Power:input_type -> provider.v1.PowerRequest
	9,  // 15: provider.v1.Provider.Reconfigure:input_type -> provider.v1.ReconfigureRequest
	10, // 16: provider.v1.Provider.HardwareUpgrade:input_type -> provider.v1.HardwareUpgradeRequest
	12, // 17: provider.v1.Provider.Describe:input_type -> provider.v1.DescribeRequest
	14, // 18: provider.v1.Provider.TaskStatus:input_type -> provider.v1.TaskStatusRequest
	16, // 19: provider.v1.Provider.SnapshotCreate:input_type -> provider.v1.SnapshotCreateRequest
	18, // 20: provider.v1.Provider.SnapshotDelete:input_type -> provider.v1.SnapshotDeleteRequest
	19, // 21: provider.v1.Provider.SnapshotRevert:input_type -> provider.v1.SnapshotRevertRequest
	20, // 22: provider.v1.Provider.Clone:input_type -> provider.v1.CloneRequest
	22, // 23: provider.v1.Provider.ImagePrepare:input_type -> provider.v1.ImagePrepareRequest
	29, // 24: provider.v1.Provider.GetCapabilities:input_type -> provider.v1.GetCapabilitiesRequest
	23, // 25: provider.v1.Provider.ExportDisk:input_type -> provider.v1.ExportDiskRequest
	25, // 26: provider.v1.Provider.ImportDisk:input_type -> provider.v1.ImportDiskRequest
	27, // 27: provider.v1.Provider.GetDiskInfo:input_type -> provider.v1.GetDiskInfoRequest
	4,  // 28: provider.v1.Provider.Validate:output_type -> provider.v1.ValidateResponse
	6,  // 29: provider.v1.Provider.Create:output_type -> provider.v1.CreateResponse
	11, // 30: provider.v1.Provider.Delete:output_type -> provider.v1.TaskResponse
	11, // 31: provider.v1.Provider.Power:output_type -> provider.v1.TaskResponse
	11, // 32: provider.v1.Provider.Reconfigure:output_type -> provider.v1.TaskResponse
	11, // 33: provider.v1.Provider.HardwareUpgrade:output_type -> provider.v1.TaskResponse
	13, // 34: provider.v1.Provider.Describe:output_type -> provider.v1.DescribeResponse
	15, // 35: provider.v1.Provider.TaskStatus:output_type -> provider.v1.TaskStatusResponse
	17, // 36: provider.v1.Provider.SnapshotCreate:output_type -> provider.v1.SnapshotCreateResponse
	11, // 37: provider.v1.Provider.SnapshotDelete:output_type -> provider.v1.TaskResponse
	11, // 38: provider.v1.Provider.SnapshotRevert:output_type -> provider.v1.TaskResponse
	21, // 39: provider.v1.Provider.Clone:output_type -> provider.v1.CloneResponse
	11, // 40: provider.v1.Provider.ImagePrepare:output_type -> provider.v1.TaskResponse
	30, // 41: provider.v1.Provider.GetCapabilities:output_type -> provider.v1.GetCapabilitiesResponse
	24, // 42: provider.v1.Provider.ExportDisk:output_type -> provider.v1.ExportDiskResponse
	26, // 43: provider.v1.Provider.ImportDisk:output_type -> provider.v1.ImportDiskResponse
	28, // 44: provider.v1.Provider.GetDiskInfo:output_type -> provider.v1.GetDiskInfoResponse
	28, // [28:45] is the sub-list for method output_type
	11, // [11:28] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() { file_provider_v1_provider_proto_init() }
func file_provider_v1_provider_proto_init() {
	if File_provider_v1_provider_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_provider_v1_provider_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*TaskRef); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_provider_v1_provider_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*Empty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_provider_v1_provider_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*ValidateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_provider_v1_provider_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*ValidateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_provider_v1_provider_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*CreateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_provider_v1_provider_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*CreateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_provider_v1_provider_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*DeleteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_provider_v1_provider_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*PowerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_provider_v1_provider_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*ReconfigureRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_provider_v1_provider_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*HardwareUpgradeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_provider_v1_provider_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*TaskResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_provider_v1_provider_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*DescribeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_provider_v1_provider_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*DescribeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_provider_v1_provider_proto_msgTypes[13].Exporter = func(v any, i int) any {
			switch v := v.(*TaskStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_provider_v1_provider_proto_msgTypes[14].Exporter = func(v any, i int) any {
			switch v := v.(*TaskStatusResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_provider_v1_provider_proto_msgTypes[15].Exporter = func(v any, i int) any {
			switch v := v.(*SnapshotCreateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_provider_v1_provider_proto_msgTypes[16].Exporter = func(v any, i int) any {
			switch v := v.(*SnapshotCreateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_provider_v1_provider_proto_msgTypes[17].Exporter = func(v any, i int) any {
			switch v := v.(*SnapshotDeleteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_provider_v1_provider_proto_msgTypes[18].Exporter = func(v any, i int) any {
			switch v := v.(*SnapshotRevertRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_provider_v1_provider_proto_msgTypes[19].Exporter = func(v any, i int) any {
			switch v := v.(*CloneRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_provider_v1_provider_proto_msgTypes[20].Exporter = func(v any, i int) any {
			switch v := v.(*CloneResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_provider_v1_provider_proto_msgTypes[21].Exporter = func(v any, i int) any {
			switch v := v.(*ImagePrepareRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_provider_v1_provider_proto_msgTypes[22].Exporter = func(v any, i int) any {
			switch v := v.(*ExportDiskRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_provider_v1_provider_proto_msgTypes[23].Exporter = func(v any, i int) any {
			switch v := v.(*ExportDiskResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_provider_v1_provider_proto_msgTypes[24].Exporter = func(v any, i int) any {
			switch v := v.(*ImportDiskRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_provider_v1_provider_proto_msgTypes[25].Exporter = func(v any, i int) any {
			switch v := v.(*ImportDiskResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_provider_v1_provider_proto_msgTypes[26].Exporter = func(v any, i int) any {
			switch v := v.(*GetDiskInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_provider_v1_provider_proto_msgTypes[27].Exporter = func(v any, i int) any {
			switch v := v.(*GetDiskInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_provider_v1_provider_proto_msgTypes[28].Exporter = func(v any, i int) any {
			switch v := v.(*GetCapabilitiesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_provider_v1_provider_proto_msgTypes[29].Exporter = func(v any, i int) any {
			switch v := v.(*GetCapabilitiesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_provider_v1_provider_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   33,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_provider_v1_provider_proto_goTypes,
		DependencyIndexes: file_provider_v1_provider_proto_depIdxs,
		EnumInfos:         file_provider_v1_provider_proto_enumTypes,
		MessageInfos:      file_provider_v1_provider_proto_msgTypes,
	}.Build()
	File_provider_v1_provider_proto = out.File
	file_provider_v1_provider_proto_rawDesc = nil
	file_provider_v1_provider_proto_goTypes = nil
	file_provider_v1_provider_proto_depIdxs = nil
}
