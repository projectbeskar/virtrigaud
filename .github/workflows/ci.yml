name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  GO_VERSION: '1.23'
  REGISTRY: ghcr.io
  IMAGE_NAME_PREFIX: projectbeskar/virtrigaud

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  security-events: write
  packages: write

jobs:
  test:
    name: Test
    runs-on: ubuntu-22.04
    timeout-minutes: 20
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version-file: go.mod
        cache: true

    - name: Tidy Go modules
      run: go mod tidy

    - name: Download dependencies
      run: go mod download

    - name: Verify dependencies
      run: go mod verify

    - name: Run go vet (excluding libvirt)
      run: |
        # Use go list to find all packages and exclude problematic ones
        go list ./... | grep -v '/internal/providers/libvirt' | grep -v '/cmd/provider-libvirt' | grep -v '/test/integration' | xargs go vet

    - name: Run tests (excluding libvirt)
      run: |
        # Use the Makefile target which properly sets up ENVTEST environment
        make test
        # The Makefile generates coverage in cover.out, rename it for codecov
        mv cover.out coverage.out

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.out
        flags: unittests
        name: codecov-umbrella

  lint:
    name: Lint
    runs-on: ubuntu-22.04
    timeout-minutes: 15
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version-file: go.mod
        cache: true

    - name: Install libvirt dependencies for Go module resolution
      run: |
        sudo apt-get update
        sudo apt-get install -y libvirt-dev pkg-config

    - name: Tidy Go modules
      run: go mod tidy

    - name: Run golangci-lint
      uses: golangci/golangci-lint-action@v6
      with:
        version: v1.64.8
        args: --timeout=10m

  security:
    name: Security Scan
    runs-on: ubuntu-22.04
    timeout-minutes: 15
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version-file: go.mod
        cache: true

    - name: Tidy Go modules
      run: go mod tidy

    - name: Run Gosec Security Scanner (excluding libvirt)
      run: |
        go install github.com/securego/gosec/v2/cmd/gosec@v2.21.4
        
        # Run gosec with timeout and better error handling
        timeout 300s $(go env GOPATH)/bin/gosec \
          -fmt sarif \
          -out gosec.sarif \
          -exclude-dir=internal/providers/libvirt \
          -exclude-dir=test/integration \
          -exclude=G104,G204,G304 \
          ./... || {
          
          echo "🔍 Gosec completed with issues or timeout. Checking results..."
          
          # Check if SARIF file was created
          if [ -f gosec.sarif ]; then
            echo "✅ SARIF file created. Checking for critical issues..."
            
            # Count critical/high severity issues 
            CRITICAL_COUNT=$(grep -o '"level":"error"' gosec.sarif | wc -l || echo "0")
            HIGH_COUNT=$(grep -o '"level":"warning"' gosec.sarif | wc -l || echo "0")
            
            echo "📊 Security scan results:"
            echo "   - Critical issues: $CRITICAL_COUNT"
            echo "   - High issues: $HIGH_COUNT"
            
            # Only fail on critical issues
            if [ "$CRITICAL_COUNT" -gt 0 ]; then
              echo "❌ Critical security issues found"
              exit 1
            else
              echo "✅ No critical security issues found"
              exit 0
            fi
          else
            echo "❌ SARIF file not created - gosec failed to complete"
            exit 1
          fi
        }

    - name: Upload SARIF file
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: gosec.sarif

    - name: Run Trivy vulnerability scanner in repo mode
      uses: aquasecurity/trivy-action@0.28.0
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'trivy-results.sarif'

  generate:
    name: Verify Generated Files
    runs-on: ubuntu-22.04
    timeout-minutes: 15
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version-file: go.mod
        cache: true

    - name: Tidy Go modules
      run: go mod tidy

    - name: Install controller-gen
      run: go install sigs.k8s.io/controller-tools/cmd/controller-gen@latest

    - name: Install protoc
      run: |
        sudo apt-get update
        sudo apt-get install -y protobuf-compiler

    - name: Install protoc plugins
      run: |
        go install google.golang.org/protobuf/cmd/protoc-gen-go@latest
        go install google.golang.org/grpc/cmd/protoc-gen-go-grpc@latest

    - name: Generate code
      run: make generate

    - name: Generate manifests
      run: make manifests

    - name: Generate protobuf
      run: make proto

    - name: Verify no changes
      run: |
        # Reset go.mod changes caused by go mod tidy in CI
        git checkout HEAD -- go.mod go.sum 2>/dev/null || true
        
        # Check for other generated file changes
        git diff --exit-code || (echo "Generated files are out of sync. Please run 'make generate && make manifests && make proto' and commit the changes." && exit 1)

  build:
    name: Build
    runs-on: ubuntu-22.04
    timeout-minutes: 20
    needs: [test, lint]
    strategy:
      matrix:
        component: [manager, provider-libvirt, provider-vsphere, provider-proxmox]
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version-file: go.mod
        cache: true

    - name: Install libvirt (for provider-libvirt)
      if: matrix.component == 'provider-libvirt'
      run: |
        sudo apt-get update
        sudo apt-get install -y libvirt-dev pkg-config

    - name: Build binary
      run: |
        case "${{ matrix.component }}" in
          manager)
            CGO_ENABLED=0 go build -o bin/manager ./cmd/manager
            ;;
          provider-libvirt)
            CGO_ENABLED=1 go build -o bin/provider-libvirt ./cmd/provider-libvirt
            ;;
          provider-vsphere)
            CGO_ENABLED=0 go build -o bin/provider-vsphere ./cmd/provider-vsphere
            ;;
          provider-proxmox)
            CGO_ENABLED=0 go build -o bin/provider-proxmox ./cmd/provider-proxmox
            ;;
        esac

    - name: Upload binary
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.component }}-binary
        path: bin/${{ matrix.component }}*

  build-tools:
    name: Build Tools
    runs-on: ubuntu-22.04
    timeout-minutes: 15
    needs: [test, lint]
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version-file: go.mod
        cache: true

    - name: Build CLI tools
      run: |
        go build -o bin/vrtg ./cmd/vrtg
        go build -o bin/vcts ./cmd/vcts
        go build -o bin/virtrigaud-loadgen ./cmd/virtrigaud-loadgen

    - name: Upload tools
      uses: actions/upload-artifact@v4
      with:
        name: cli-tools
        path: bin/*

  build-images:
    name: Build Container Images
    runs-on: ubuntu-22.04
    timeout-minutes: 30
    needs: [test, lint, security]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    strategy:
      matrix:
        component: [manager, provider-libvirt, provider-vsphere, provider-proxmox]
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_PREFIX }}/${{ matrix.component }}
        tags: |
          type=ref,event=branch
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push development image
      uses: docker/build-push-action@v6
      with:
        context: .
        file: ${{ matrix.component == 'manager' && './build/Dockerfile.manager' || format('./cmd/{0}/Dockerfile', matrix.component) }}
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        # Disable GitHub Actions cache due to reliability issues
        # cache-from: type=gha
        # cache-to: type=gha,mode=max

  helm:
    name: Validate Helm Charts
    runs-on: ubuntu-22.04
    timeout-minutes: 10
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Set up Helm
      uses: azure/setup-helm@v4
      with:
        version: 'v3.12.0'

    - name: Validate Helm charts
      run: |
        helm lint charts/virtrigaud
        
    - name: Validate rendered manifests
      run: |
        # Render Helm template (without cluster validation)
        helm template virtrigaud charts/virtrigaud --values charts/virtrigaud/values.yaml > /tmp/rendered.yaml
        
        # Basic YAML validation - check if it's valid YAML
        echo "Validating YAML syntax..."
        python3 -c "
        import yaml, sys
        try:
            with open('/tmp/rendered.yaml', 'r') as f:
                yaml.safe_load_all(f)
            print('✅ YAML syntax validation passed')
        except yaml.YAMLError as e:
            print(f'❌ YAML syntax error: {e}')
            sys.exit(1)
        "
        
        # Check for basic Kubernetes resource structure
        echo "Checking for basic Kubernetes resource structure..."
        grep -E "(apiVersion|kind|metadata)" /tmp/rendered.yaml > /dev/null && echo "✅ Basic Kubernetes structure found" || echo "⚠️  No Kubernetes resources found"

  conformance:
    name: Conformance Tests
    runs-on: ubuntu-22.04
    timeout-minutes: 20
    needs: [build-tools]
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version-file: go.mod
        cache: true

    - name: Download CLI tools
      uses: actions/download-artifact@v4
      with:
        name: cli-tools
        path: bin/

    - name: Make tools executable
      run: chmod +x bin/*

    - name: Validate conformance specs
      run: ./bin/vcts validate test/conformance/specs/

    - name: Upload conformance results
      uses: actions/upload-artifact@v4
      with:
        name: conformance-validation
        path: test/conformance/specs/

  integration:
    name: Integration Tests
    runs-on: ubuntu-22.04
    timeout-minutes: 20
    needs: [build]
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version-file: go.mod
        cache: true

    - name: Set up Kind cluster
      uses: helm/kind-action@v1.10.0
      with:
        version: v0.24.0
        cluster_name: virtrigaud-integration
        kubectl_version: v1.31.2
        node_image: kindest/node:v1.31.2@sha256:18fbefc20a7113353c7b75b5c869d7145a6abd6269154825872dc59c1329912e
        wait: 60s
        verbosity: 1

    - name: Install CRDs
      run: make install

    - name: Run integration tests (excluding libvirt)
      run: |
        # Skip integration tests as they contain libvirt dependencies
        # These tests should run separately in environments with libvirt
        echo "Skipping integration tests in CI due to libvirt dependencies"

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: integration-test-results
        path: test/integration/results/
      continue-on-error: true

  # Consolidated validation jobs (previously separate workflows)
  catalog-validation:
    name: Catalog Validation
    runs-on: ubuntu-22.04
    timeout-minutes: 10
    if: contains(github.event.head_commit.modified, 'providers/catalog.yaml') || contains(github.event.head_commit.added, 'providers/catalog.yaml')
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install jsonschema pyyaml

    - name: Validate catalog schema
      run: |
        python -c "
        import yaml
        import jsonschema

        # Define catalog schema
        schema = {
          'type': 'object',
          'properties': {
            'providers': {
              'type': 'array',
              'items': {
                'type': 'object',
                'properties': {
                  'name': {'type': 'string'},
                  'displayName': {'type': 'string'},
                  'description': {'type': 'string'},
                  'capabilities': {'type': 'array'},
                  'conformance': {'type': 'object'}
                },
                'required': ['name', 'displayName', 'description']
              }
            }
          },
          'required': ['providers']
        }

        # Validate catalog.yaml
        with open('providers/catalog.yaml', 'r') as f:
            data = yaml.safe_load(f)
        
        jsonschema.validate(data, schema)
        print('✅ Catalog schema validation passed')
        "

  api-conversion-tests:
    name: API Conversion Tests
    runs-on: ubuntu-22.04
    timeout-minutes: 15
    if: contains(github.event.head_commit.modified, 'api/') || contains(github.event.head_commit.added, 'api/') || contains(github.event.head_commit.modified, 'config/crd/') || contains(github.event.head_commit.added, 'config/crd/')
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}
        cache: true

    - name: Verify single-version CRDs
      run: |
        echo "🔍 Verifying single v1beta1 version in CRDs..."
        ./hack/verify-single-version.sh 

    - name: Verify CRD generation
      run: |
        echo "🔍 Verifying CRD generation..."
        make generate && git diff --exit-code
        git diff --exit-code config/crd/ || (echo "❌ CRDs are out of sync" && exit 1)

  ci:
    name: CI Summary
    runs-on: ubuntu-22.04
    needs: [test, lint, security, generate, build, build-tools, helm, conformance, integration, catalog-validation, api-conversion-tests]
    if: always()
    steps:
    - name: Check CI Results
      run: |
        echo "CI Summary:"
        echo "- Test: ${{ needs.test.result }}"
        echo "- Lint: ${{ needs.lint.result }}"
        echo "- Security: ${{ needs.security.result }}"
        echo "- Generate: ${{ needs.generate.result }}"
        echo "- Build: ${{ needs.build.result }}"
        echo "- Build Tools: ${{ needs.build-tools.result }}"
        echo "- Helm: ${{ needs.helm.result }}"
        echo "- Conformance: ${{ needs.conformance.result }}"
        echo "- Integration: ${{ needs.integration.result }}"
        echo "- Catalog Validation: ${{ needs.catalog-validation.result }}"
        echo "- API Conversion Tests: ${{ needs.api-conversion-tests.result }}"
        
        # Fail if any required job failed
        if [[ "${{ needs.test.result }}" != "success" ]] || \
           [[ "${{ needs.lint.result }}" != "success" ]] || \
           [[ "${{ needs.security.result }}" != "success" ]] || \
           [[ "${{ needs.generate.result }}" != "success" ]] || \
           [[ "${{ needs.build.result }}" != "success" ]] || \
           [[ "${{ needs.build-tools.result }}" != "success" ]] || \
           [[ "${{ needs.helm.result }}" != "success" ]] || \
           [[ "${{ needs.conformance.result }}" != "success" ]] || \
           ([[ "${{ needs.catalog-validation.result }}" != "success" ]] && [[ "${{ needs.catalog-validation.result }}" != "skipped" ]]) || \
           ([[ "${{ needs.api-conversion-tests.result }}" != "success" ]] && [[ "${{ needs.api-conversion-tests.result }}" != "skipped" ]]); then
          echo "❌ CI failed"
          exit 1
        fi
        
        echo "✅ CI passed"