name: Runtime Chart

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'charts/virtrigaud-provider-runtime/**'
      - '.github/workflows/runtime-chart.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'charts/virtrigaud-provider-runtime/**'
      - '.github/workflows/runtime-chart.yml'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read

env:
  GO_VERSION: '1.23'

jobs:
  lint:
    name: Lint Runtime Chart
    runs-on: ubuntu-24.04
    timeout-minutes: 15
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Set up Helm
      uses: azure/setup-helm@v4
      with:
        version: 'latest'

    - name: Lint chart
      run: helm lint charts/virtrigaud-provider-runtime/

    - name: Template chart with mock provider values
      run: |
        helm template test-mock charts/virtrigaud-provider-runtime/ \
          -f charts/virtrigaud-provider-runtime/examples/values-mock.yaml

    - name: Template chart with vSphere provider values
      run: |
        helm template test-vsphere charts/virtrigaud-provider-runtime/ \
          -f charts/virtrigaud-provider-runtime/examples/values-vsphere.yaml

    - name: Template chart with libvirt provider values
      run: |
        helm template test-libvirt charts/virtrigaud-provider-runtime/ \
          -f charts/virtrigaud-provider-runtime/examples/values-libvirt.yaml

    - name: Template chart with proxmox provider values
      run: |
        helm template test-proxmox charts/virtrigaud-provider-runtime/ \
          -f charts/virtrigaud-provider-runtime/examples/values-proxmox.yaml

  kind-test:
    name: Kind Integration Test
    runs-on: ubuntu-24.04
    timeout-minutes: 15
    needs: lint
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version-file: go.mod
        cache: true

    - name: Set up Helm
      uses: azure/setup-helm@v4
      with:
        version: 'latest'

    - name: Set up Kind
      uses: helm/kind-action@v1.10.0
      with:
        cluster_name: runtime-test
        config: |
          kind: Cluster
          apiVersion: kind.x-k8s.io/v1alpha4
          nodes:
          - role: control-plane
          - role: worker

    - name: Build mock provider image
      run: |
        make build-provider-mock
        docker build -f cmd/provider-mock/Dockerfile -t provider-mock:test .
        kind load docker-image provider-mock:test --name runtime-test

    - name: Install runtime chart with mock provider
      run: |
        helm install test-runtime charts/virtrigaud-provider-runtime/ \
          --set image.repository=provider-mock \
          --set image.tag=test \
          --set image.pullPolicy=Never \
          --wait --timeout=5m

    - name: Verify deployment is ready
      run: |
        kubectl get pods
        kubectl wait --for=condition=ready pod -l app.kubernetes.io/name=virtrigaud-provider-runtime --timeout=60s

    - name: Test health endpoint
      run: |
        kubectl port-forward svc/test-runtime-virtrigaud-provider-runtime 8080:8080 &
        PF_PID=$!
        sleep 5
        
        # Test health endpoint (assuming mock provider has HTTP health check)
        curl -f http://localhost:8080/health || echo "Health check not available via HTTP"
        
        kill $PF_PID || true

    - name: Test gRPC service
      run: |
        kubectl port-forward svc/test-runtime-virtrigaud-provider-runtime 9443:9443 &
        PF_PID=$!
        sleep 5
        
        # Test gRPC health (using grpcurl if available)
        if command -v grpcurl >/dev/null 2>&1; then
          grpcurl -plaintext localhost:9443 grpc.health.v1.Health/Check || echo "gRPC health check failed"
        else
          echo "grpcurl not available, skipping gRPC health check"
        fi
        
        kill $PF_PID || true

    - name: Check logs
      if: failure()
      run: |
        kubectl describe pods
        kubectl logs -l app.kubernetes.io/name=virtrigaud-provider-runtime

    - name: Clean up
      if: always()
      run: |
        helm uninstall test-runtime || true

  package:
    name: Package Chart
    runs-on: ubuntu-24.04
    timeout-minutes: 15
    needs: [lint, kind-test]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Set up Helm
      uses: azure/setup-helm@v4
      with:
        version: 'latest'

    - name: Package chart
      run: |
        mkdir -p dist
        helm package charts/virtrigaud-provider-runtime/ -d dist/

    - name: Upload chart artifact
      uses: actions/upload-artifact@v4
      with:
        name: runtime-chart
        path: dist/*.tgz

  crd-installation-test:
    name: CRD Installation Test
    runs-on: ubuntu-24.04
    timeout-minutes: 15
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Set up Helm
      uses: azure/setup-helm@v3
      with:
        version: '3.12.0'

    - name: Set up kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'latest'

    - name: Create kind cluster
      uses: helm/kind-action@v1.10.0
      with:
        cluster_name: crd-test
        kubectl_version: v1.28.0

    - name: Test CRD installation via Helm
      run: |
        echo "🧪 Testing CRD installation..."
        
        # Test installing CRDs via Helm chart
        helm install virtrigaud-crds ./charts/virtrigaud-crds --wait --timeout=5m
        
        # Verify CRDs are installed
        echo "🔍 Verifying CRDs are installed..."
        kubectl get crd | grep virtrigaud.io
        
        # Test CRD functionality by creating sample resources
        echo "🧪 Testing CRD functionality..."
        kubectl apply -f - <<EOF
        apiVersion: infra.virtrigaud.io/v1beta1
        kind: Provider
        metadata:
          name: test-provider
        spec:
          type: mock
          endpoint: http://localhost:9443
        EOF
        
        # Verify resource was created
        kubectl get provider test-provider
        
        # Clean up
        kubectl delete provider test-provider
        helm uninstall virtrigaud-crds
