name: Release
on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag to release'
        required: true
        type: string

env:
  REGISTRY: ghcr.io
  IMAGE_NAME_PREFIX: projectbeskar/virtrigaud

permissions:
  contents: write
  packages: write
  id-token: write
  security-events: write

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      tag: ${{ steps.get-tag.outputs.tag }}
      version: ${{ steps.get-tag.outputs.version }}
      images: ${{ steps.images.outputs.images }}
    steps:
    - name: Get tag
      id: get-tag
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          TAG="${{ github.event.inputs.tag }}"
        else
          TAG="${{ github.ref_name }}"
        fi
        VERSION=${TAG#v}
        echo "tag=${TAG}" >> $GITHUB_OUTPUT
        echo "version=${VERSION}" >> $GITHUB_OUTPUT

    - name: Set image names
      id: images
      run: |
        IMAGES=$(cat <<EOF | jq -c .
        {
          "manager": "${{ env.REGISTRY }}/${{ env.IMAGE_NAME_PREFIX }}:${{ steps.get-tag.outputs.tag }}",
          "provider-libvirt": "${{ env.REGISTRY }}/${{ env.IMAGE_NAME_PREFIX }}/provider-libvirt:${{ steps.get-tag.outputs.tag }}",
          "provider-vsphere": "${{ env.REGISTRY }}/${{ env.IMAGE_NAME_PREFIX }}/provider-vsphere:${{ steps.get-tag.outputs.tag }}"
        }
        EOF
        )
        echo "images=${IMAGES}" >> $GITHUB_OUTPUT

  build-and-push:
    needs: prepare
    runs-on: ubuntu-latest
    strategy:
      matrix:
        component: [manager, provider-libvirt, provider-vsphere]
        platform: [linux/amd64, linux/arm64]
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_PREFIX }}/${{ matrix.component }}
        tags: |
          type=ref,event=tag
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha

    - name: Build and push
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./build/Dockerfile.${{ matrix.component }}
        platforms: ${{ matrix.platform }}
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        provenance: mode=max
        sbom: true

    - name: Install Cosign
      uses: sigstore/cosign-installer@v3

    - name: Sign image
      run: |
        cosign sign --yes ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_PREFIX }}/${{ matrix.component }}@${{ steps.build.outputs.digest }}

  security-scan:
    needs: [prepare, build-and-push]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        component: [manager, provider-libvirt, provider-vsphere]
    steps:
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ fromJson(needs.prepare.outputs.images)[matrix.component] }}
        format: 'sarif'
        output: 'trivy-results-${{ matrix.component }}.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'trivy-results-${{ matrix.component }}.sarif'

    - name: Run Trivy in table format
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ fromJson(needs.prepare.outputs.images)[matrix.component] }}
        format: 'table'
        exit-code: '1'
        ignore-unfixed: true
        vuln-type: 'os,library'
        severity: 'CRITICAL,HIGH'

  generate-sbom:
    needs: [prepare, build-and-push]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        component: [manager, provider-libvirt, provider-vsphere]
    steps:
    - name: Generate SBOM
      uses: anchore/sbom-action@v0
      with:
        image: ${{ fromJson(needs.prepare.outputs.images)[matrix.component] }}
        format: spdx-json
        output-file: sbom-${{ matrix.component }}.spdx.json

    - name: Upload SBOM
      uses: actions/upload-artifact@v4
      with:
        name: sbom-${{ matrix.component }}
        path: sbom-${{ matrix.component }}.spdx.json

  build-helm-chart:
    needs: prepare
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Install Helm
      uses: azure/setup-helm@v3
      with:
        version: '3.12.0'

    - name: Update chart version
      run: |
        sed -i "s/version: .*/version: ${{ needs.prepare.outputs.version }}/" charts/virtrigaud/Chart.yaml
        sed -i "s/appVersion: .*/appVersion: \"${{ needs.prepare.outputs.tag }}\"/" charts/virtrigaud/Chart.yaml

    - name: Package chart
      run: |
        helm dependency update charts/virtrigaud
        helm package charts/virtrigaud --destination ./helm-packages/

    - name: Upload chart
      uses: actions/upload-artifact@v4
      with:
        name: helm-chart
        path: helm-packages/*.tgz

  test-conformance:
    needs: [prepare, build-and-push]
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'

    - name: Build conformance test suite
      run: |
        cd cmd/vcts
        go build -o ../../vcts .

    - name: Set up Kind cluster
      uses: helm/kind-action@v1
      with:
        version: v0.20.0

    - name: Install CRDs
      run: |
        make install

    - name: Run conformance tests
      run: |
        ./vcts run --provider=test --output-dir=./conformance-results

    - name: Upload conformance results
      uses: actions/upload-artifact@v4
      with:
        name: conformance-results
        path: conformance-results/

  generate-changelog:
    needs: prepare
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Generate changelog
      id: changelog
      run: |
        # Get the previous tag
        PREV_TAG=$(git tag --sort=version:refname | grep -B1 ${{ needs.prepare.outputs.tag }} | head -1)
        if [ -z "$PREV_TAG" ]; then
          PREV_TAG=$(git rev-list --max-parents=0 HEAD)
        fi
        
        # Generate changelog
        cat > CHANGELOG.md << EOF
        # Changelog for ${{ needs.prepare.outputs.tag }}
        
        ## Changes since ${PREV_TAG}
        
        $(git log --pretty=format:"- %s (%h)" ${PREV_TAG}..${{ needs.prepare.outputs.tag }})
        
        ## Images
        
        - Manager: ${{ fromJson(needs.prepare.outputs.images).manager }}
        - Provider Libvirt: ${{ fromJson(needs.prepare.outputs.images).provider-libvirt }}
        - Provider vSphere: ${{ fromJson(needs.prepare.outputs.images).provider-vsphere }}
        
        ## Security
        
        All images are signed with Cosign and include SBOMs.
        EOF

    - name: Upload changelog
      uses: actions/upload-artifact@v4
      with:
        name: changelog
        path: CHANGELOG.md

  create-release:
    needs: [prepare, build-and-push, security-scan, generate-sbom, build-helm-chart, test-conformance, generate-changelog]
    runs-on: ubuntu-latest
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4

    - name: Create checksums
      run: |
        find . -name "*.tgz" -o -name "*.spdx.json" | xargs sha256sum > checksums.txt

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ needs.prepare.outputs.tag }}
        name: Release ${{ needs.prepare.outputs.tag }}
        body_path: changelog/CHANGELOG.md
        files: |
          helm-chart/*.tgz
          sbom-*/*.spdx.json
          conformance-results/*
          checksums.txt
        prerelease: ${{ contains(needs.prepare.outputs.tag, '-') }}

  update-helm-repo:
    needs: [create-release]
    runs-on: ubuntu-latest
    steps:
    - name: Checkout gh-pages
      uses: actions/checkout@v4
      with:
        ref: gh-pages
        path: gh-pages

    - name: Download helm chart
      uses: actions/download-artifact@v4
      with:
        name: helm-chart
        path: ./charts

    - name: Update Helm repository
      run: |
        cd gh-pages
        cp ../charts/*.tgz ./
        helm repo index . --url https://projectbeskar.github.io/virtrigaud
        git config user.name "GitHub Actions"
        git config user.email "actions@github.com"
        git add .
        git commit -m "Update Helm chart for ${{ needs.prepare.outputs.tag }}"
        git push
