# Complete LibVirt/KVM Provider Example
# This example demonstrates VM creation using the LibVirt provider
#
# üìù NOTE: Requires LibVirt Daemon Access
# The LibVirt provider connects to libvirtd (local or remote). For local development,
# install libvirt-daemon-system. See docs/providers/libvirt.md for setup details.
#
# ‚ö†Ô∏è  SCHEMA UPDATE: This example has been updated to match the current v1beta1 CRD schema.
# Key changes: endpoint format, memory/disk sizes use resource.Quantity, 
# nested structure for source/network configs, and proper field naming.

# First, create the credentials secret (for remote connections)
apiVersion: v1
kind: Secret
metadata:
  name: libvirt-creds
  namespace: default
type: Opaque
stringData:
  username: "virtrigaud"
  password: "your-password-here"
  # For TLS connections (optional):
  # tls.crt: |
  #   -----BEGIN CERTIFICATE-----
  #   ...
  #   -----END CERTIFICATE-----
  # tls.key: |
  #   -----BEGIN PRIVATE KEY-----
  #   ...
  #   -----END PRIVATE KEY-----

---
# Define the Libvirt provider
apiVersion: infra.virtrigaud.io/v1beta1
kind: Provider
metadata:
  name: libvirt-local
  namespace: default
spec:
  type: libvirt
  endpoint: qemu:///system  # Local connection
  # For remote connections:
  # endpoint: qemu+ssh://user@kvm-host.example.com/system
  # endpoint: qemu+tcp://kvm-host.example.com:16509/system
  # endpoint: qemu+tls://kvm-host.example.com:16514/system
  credentialSecretRef:
    name: libvirt-creds
  defaults:
    cluster: default
  rateLimit:
    qps: 5
    burst: 10
  runtime:
    mode: Remote
    image: "virtrigaud/provider-libvirt:latest"
    service:
      port: 9090

---
# Define a VM class for KVM
apiVersion: infra.virtrigaud.io/v1beta1
kind: VMClass
metadata:
  name: kvm-small
  namespace: default
spec:
  cpu: 2
  memory: "2Gi"  # Uses Kubernetes resource.Quantity format
  firmware: BIOS  # Can be BIOS or UEFI
  diskDefaults:
    type: thin
    size: "20Gi"  # Uses Kubernetes resource.Quantity format
  guestToolsPolicy: install
  extraConfig:
    "autostart": "false"

---
# Define the VM image for Libvirt
apiVersion: infra.virtrigaud.io/v1beta1
kind: VMImage
metadata:
  name: ubuntu-20-kvm
  namespace: default
spec:
  source:
    libvirt:
      path: "/var/lib/libvirt/images/ubuntu-20.04-cloudimg.qcow2"
      format: qcow2
      # Alternative: download from URL
      # url: "https://cloud-images.ubuntu.com/focal/current/focal-server-cloudimg-amd64.img"
      # checksum: "abcd1234..."
      # checksumType: sha256
  prepare:
    onMissing: Fail  # Options: Import, Fail, Wait (previously importIfMissing)

---
# Define network attachment for Libvirt
apiVersion: infra.virtrigaud.io/v1beta1
kind: VMNetworkAttachment
metadata:
  name: kvm-default-network
  namespace: default
spec:
  network:
    type: bridged
    libvirt:
      networkName: "default"  # Use Libvirt default network
      model: virtio           # Network device model
  ipAllocation:
    type: DHCP

---
# Create the virtual machine
apiVersion: infra.virtrigaud.io/v1beta1
kind: VirtualMachine
metadata:
  name: ubuntu-kvm-vm
  namespace: default
spec:
  providerRef:
    name: libvirt-local
  classRef:
    name: kvm-small
  imageRef:
    name: ubuntu-20-kvm
  networks:
    - name: kvm-default-network
      networkRef:
        name: kvm-default-network
      # IP allocation handled by VMNetworkAttachment
  disks:
    - name: extra-storage
      size: "50Gi"
      type: thin
  powerState: "On"  # Quote to ensure string type
  userData:
    cloudInit:
      inline: |
        #cloud-config
        hostname: ubuntu-kvm-vm
        fqdn: ubuntu-kvm-vm.local
        
        users:
          - name: ubuntu
            sudo: ALL=(ALL) NOPASSWD:ALL
            shell: /bin/bash
            lock_passwd: false
            passwd: $6$rounds=4096$saltysalt$hash... # Set your password hash
            ssh_authorized_keys:
              - ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAAB... # Add your SSH key here
              
        packages:
          - qemu-guest-agent
          - curl
          - wget
          - htop
          - nginx
          
        runcmd:
          - systemctl enable qemu-guest-agent
          - systemctl start qemu-guest-agent
          - systemctl enable nginx
          - systemctl start nginx
          - echo "<h1>Hello from KVM!</h1>" > /var/www/html/index.html
          - ufw allow 22/tcp
          - ufw allow 80/tcp
          - ufw --force enable
          
        final_message: "KVM VM is ready! SSH: ssh ubuntu@<ip>"
        
  tags:
    - environment:test
    - hypervisor:kvm
    - managed-by:virtrigaud
